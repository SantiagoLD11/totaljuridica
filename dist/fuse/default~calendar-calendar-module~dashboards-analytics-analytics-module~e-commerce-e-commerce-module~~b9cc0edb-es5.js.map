{"version":3,"sources":["webpack:///src/app/main/pages/authentication/login-2/login.service.ts"],"names":["LoginService","http","tipo","setLocalItem","getTimeExpire","getLocalItem","token","LocalItem","id","key","time","timestamp","setTimeToLive","storageObj","sessionStorage","setItem","JSON","stringify","storage","getItem","item","parse","evaluateTimeToLive","value","removeItem","lifespan","currentTime","Date","getTime","timeToLive","min","after","getToken","payload","split","window","atob","getId","user","method","type","base","get","url","usr","pass","request","pipe","data","console","log","sessionId","username","password","query","encodeURI","undefined","SaveProfile","saveContactoId","saveTipo","saveId","saveToken","throw","idCustomer","sessionid","res","setCiudadesTxt","saveEnterpriseData","toString","entData","CommercialId","subscribe","SaveContactData","ContactData","email","linea","ciudades","profile","session","getLoginPersona"],"mappings":";;;;;;;;;;;;;;;;;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;QAgCaA,Y;;;AAQT;;;;;AAKA,4BACYC,IADZ,EAC4B;AAAA;;AAAhB,aAAAA,IAAA,GAAAA,IAAA;AAIX;;;;iCAEeC,I,EAAY;AACxB,eAAKC,YAAL,CAAkB,eAAlB,EAAmCD,IAAnC,EAAyC,KAAKE,aAAL,EAAzC;AACA,eAAKF,IAAL,GAAYA,IAAZ;AACH;;;kCAEa;AACV,cAAIA,IAAI,GAAG,KAAKG,YAAL,CAAkB,eAAlB,CAAX;AACA,iBAAOH,IAAP;AACH;;;kCAEgBI,K,EAAa;AAC1B,eAAKH,YAAL,CAAkB,YAAlB,EAAgCG,KAAhC,EAAuC,KAAKF,aAAL,EAAvC;AACA,eAAKE,KAAL,GAAaA,KAAb;AACH;;;mCAEc;AACX,cAAIC,SAAS,GAAG,KAAKF,YAAL,CAAkB,YAAlB,CAAhB;AACA,iBAAOE,SAAP;AACH;;;+BAEcC,E,EAAU;AACrB,eAAKL,YAAL,CAAkB,SAAlB,EAA6BK,EAA7B,EAAiC,KAAKJ,aAAL,EAAjC;AACA,eAAKI,EAAL,GAAUA,EAAV;AACH;;;uCAEsBA,E,EAAU;AAC7B,eAAKL,YAAL,CAAkB,YAAlB,EAAgCK,EAAhC,EAAoC,KAAKJ,aAAL,EAApC;AACH;;;qCAEYK,G,EAAKD,E,EAAIE,I,EAAO;AACzBA,cAAI,GAAGA,IAAI,IAAI,CAAf;AACA,cAAIC,SAAS,GAAG,KAAKC,aAAL,CAAmBF,IAAnB,CAAhB;AACA,cAAIG,UAAU,GAAG;AACb,yBAAaF,SADA;AAEb,qBAASH;AAFI,WAAjB,CAHyB,CAOzB;AACA;;AACAM,wBAAc,CAACC,OAAf,CAAuBN,GAAvB,EAA4BO,IAAI,CAACC,SAAL,CAAeJ,UAAf,CAA5B;AACH,S,CAED;;;;qCACaJ,G,EAAK;AACd,cAAIS,OAAO,GAAGJ,cAAc,CAACK,OAAf,CAAuBV,GAAvB,CAAd,CADc,CAEd;AACA;;AACA,cAAIW,IAAI,GAAG,IAAX;;AAEA,cAAIF,OAAJ,EAAa;AACTE,gBAAI,GAAGJ,IAAI,CAACK,KAAL,CAAWH,OAAX,CAAP;AACH;;AAED,cAAIE,IAAJ,EAAU;AAAE;AACR,gBAAIV,IAAI,GAAG,KAAKY,kBAAL,CAAwBF,IAAI,CAACT,SAA7B,CAAX;;AACA,gBAAID,IAAJ,EAAU;AACN;AACA,qBAAOU,IAAI,CAACG,KAAZ;AACH,aAHD,MAGO;AACH;AACAT,4BAAc,CAACU,UAAf,CAA0Bf,GAA1B;AACA,qBAAO,KAAP;AACH;AACJ,WAVD,MAWK;AACD,mBAAO,KAAP;AACH;AACJ;;;sCAGagB,Q,EAAU;AACpB,cAAIC,WAAW,GAAG,IAAIC,IAAJ,GAAWC,OAAX,EAAlB;AACA,cAAIC,UAAJ;;AACA,cAAIJ,QAAQ,KAAK,CAAjB,EAAoB;AAChBI,sBAAU,GAAGH,WAAW,GAAGD,QAA3B;AACH,WAFD,MAEO;AACHI,sBAAU,GAAG,CAAb,CADG,CACa;AACnB;;AACD,iBAAOA,UAAP;AACH,S,CAED;;;;wCACgB;AACZ,cAAIC,GAAG,GAAG,KAAK,IAAf;AACA,cAAIC,KAAK,GAAG,KAAKD,GAAjB;AACA,iBAAOC,KAAP;AACH,S,CAED;;;;2CACmBpB,S,EAAW;AAE1B;AACA;AACA,cAAIe,WAAW,GAAG,IAAIC,IAAJ,GAAWC,OAAX,EAAlB;;AACA,cAAIF,WAAW,IAAIf,SAAf,IAA4BA,SAAS,KAAK,CAA9C,EAAiD;AAC7C,mBAAO,IAAP;AACH,WAFD,MAEO;AACH,mBAAO,KAAP;AACH;AACJ,S,CAED;AACA;;;;wCACgBF,G,EAAK;AACjB,iBAAOK,cAAc,CAACU,UAAf,CAA0Bf,GAA1B,CAAP;AACH;;;gCAEW;AACR,cAAID,EAAE,GAAG,KAAKH,YAAL,CAAkB,SAAlB,CAAT;AACA,iBAAOG,EAAP;AACH;;;yCAEoB;AACjB,cAAMF,KAAK,GAAG,KAAK0B,QAAL,EAAd;AACA,cAAIC,OAAJ;;AACA,cAAI3B,KAAJ,EAAW;AACP2B,mBAAO,GAAG3B,KAAK,CAAC4B,KAAN,CAAY,GAAZ,EAAiB,CAAjB,CAAV;AACAD,mBAAO,GAAGE,MAAM,CAACC,IAAP,CAAYH,OAAZ,CAAV;AACA,mBAAOjB,IAAI,CAACK,KAAL,CAAWY,OAAX,CAAP;AACH,WAJD,MAIO;AACH,mBAAO,IAAP;AACH;AACJ;;;4CAEuB;AACpB,iBAAO,KAAKI,KAAL,EAAP;AACH;;;qCAEgB;AACb,cAAMC,IAAI,GAAG,KAAKN,QAAL,EAAb;;AACA,cAAIM,IAAJ,EAAU;AACN,mBAAO,IAAP;AACH,WAFD,MAEO;AACH,mBAAO,KAAP;AACH;AACJ;;;gCAEeC,M,EAAwBC,I,EAAwCF,I,EAAmB;AAC/F,cAAIG,IAAJ;;AAEA,cAAIF,MAAM,KAAK,KAAf,EAAsB;AAClB;AACAE,gBAAI,GAAG,KAAKxC,IAAL,CAAUyC,GAAV,WAAiB,qEAAYC,GAA7B,sCAA4D,qEAAYC,GAAxE,uBAAwF,qEAAYC,IAApG,kBAAP,CAFkB,CAE8G;AACnI,WAHD,MAGO,CACH;AACH;;AAED,cAAMC,OAAO,GAAGL,IAAI,CAACM,IAAL,CACZ,2DAAI,UAACC,IAAD,EAAyB;AACzBC,mBAAO,CAACC,GAAR,CAAYF,IAAZ;;AACA,gBAAIA,IAAI,CAACG,SAAT,EAAoB,CAChB;AACH;;AACD,mBAAOH,IAAP;AACH,WAND,CADY,CAAhB;AASA,iBAAOF,OAAP;AACH;;;kCAEgBM,Q,EAAkBC,Q,EAAkBF,S,EAAiB;AAAA;;AAClE,cAAIG,KAAK,GAAG,gFAAgFF,QAAhF,GAA2FG,SAAS,CAAC,GAAD,CAApG,GAA4G,wBAA5G,GAAuIF,QAAvI,GAAkJE,SAAS,CAAC,GAAD,CAAvK;AACA,cAAIZ,GAAG,GAAG,UAAG,qEAAYA,GAAf,gDAA+DW,KAA/D,GAAuE,aAAvE,GAAuFH,SAAvF,GAAmG,wBAA7G;AACA,cAAIV,IAAI,GAAG,KAAKxC,IAAL,CAAUyC,GAAV,CAAcC,GAAd,CAAX;AACA,cAAMG,OAAO,GAAGL,IAAI,CAACM,IAAL,CACZ,2DAAI,UAACC,IAAD,EAAU;AACV,gBAAKA,IAAI,IAAI,EAAT,IAAiBA,IAAI,IAAIQ,SAA7B,EAAyC;AACrC,mBAAI,CAACC,WAAL,CAAiBzC,IAAI,CAACC,SAAL,CAAe+B,IAAI,CAAC,CAAD,CAAnB,CAAjB;;AACA,mBAAI,CAACU,cAAL,CAAoBV,IAAI,CAAC,CAAD,CAAJ,CAAQ,CAAR,CAApB;;AACA,mBAAI,CAACW,QAAL,CAAcX,IAAI,CAAC,CAAD,CAAJ,CAAQ,CAAR,CAAd,EAHqC,CAIrC;;;AAEA,mBAAI,CAACY,MAAL,CAAYZ,IAAI,CAAC,CAAD,CAAJ,CAAQ,CAAR,CAAZ;;AACA,mBAAI,CAACa,SAAL,CAAeV,SAAf;AACH,aARD,MAQO;AACH,mBAAI,CAACO,cAAL,CAAoB,EAApB;;AACA,mBAAI,CAACD,WAAL,CAAiB,EAAjB;;AACA,mBAAI,CAACG,MAAL,CAAY,EAAZ;;AACA,mBAAI,CAACC,SAAL,CAAe,EAAf;;AACA,mBAAI,CAACF,QAAL,CAAc,EAAd;;AACA,qBAAO,gDAAWG,KAAX,CAAiB,kBAAjB,CAAP;AACH;;AACD,mBAAOd,IAAP;AACH,WAlBD,CADY,CAAhB;AAqBA,iBAAOF,OAAP;AACH;;;yCAEuBM,Q,EAAkBD,S,EAAiB;AACvD,cAAIG,KAAK,GAAGC,SAAS,CAAC,yIAAD,CAAT,GAAuJH,QAAvJ,GAAkKG,SAAS,CAAC,GAAD,CAAvL;AACA,cAAIZ,GAAG,GAAG,UAAG,qEAAYA,GAAf,gDAA+DW,KAA/D,GAAuE,aAAvE,GAAuFH,SAAvF,GAAmG,wBAA7G;AACA,cAAIV,IAAI,GAAG,KAAKxC,IAAL,CAAUyC,GAAV,CAAcC,GAAd,CAAX;AACA,cAAMG,OAAO,GAAGL,IAAI,CAACM,IAAL,CACZ,2DAAI,UAACC,IAAD,EAAU;AACV,gBAAKA,IAAI,IAAI,EAAT,IAAiBA,IAAI,IAAIQ,SAA7B,EAAyC;AACrC,qBAAOR,IAAP;AACH,aAFD,MAEO;AACH,qBAAO,gDAAWc,KAAX,CAAiB,kBAAjB,CAAP;AACH;AACJ,WAND,CADY,CAAhB;AASA,iBAAOhB,OAAP;AACH;;;wCAGsBiB,U,EAAoBC,S,EAAiB;AAAA;;AACxD;AACA,cAAMV,KAAK,GAAGC,SAAS,mGAA4FQ,UAA5F,EAAvB;AACA,cAAMpB,GAAG,GAAG,UAAG,qEAAYA,GAAf,gDAA+DW,KAA/D,GAAuE,aAAvE,GAAuFU,SAAvF,GAAmG,4BAA/G;AACA,cAAIvB,IAAJ;AACAA,cAAI,GAAG,KAAKxC,IAAL,CAAUyC,GAAV,CAAcC,GAAd,CAAP;AACA,iBAAOF,IAAI,CAACM,IAAL,CACH,2DAAI,UAACkB,GAAD,EAAS;AACT,gBAAIA,GAAG,CAAC,CAAD,CAAP,EAAY;AACR,oBAAI,CAACC,cAAL,CAAoBD,GAAG,CAAC,CAAD,CAAH,CAAO,CAAP,CAApB;;AACA,oBAAI,CAACE,kBAAL,CAAwBF,GAAG,CAACG,QAAJ,EAAxB;AACH;;AACD,mBAAOH,GAAP;AACH,WAND,CADG,CAAP;AASH;;;wCAEsBb,Q,EAAkBC,Q,EAAkBF,S,EAAiB;AAAA;;AACxE,eAAKU,SAAL,CAAeV,SAAf;AACA,cAAIG,KAAK,GAAGC,SAAS,wFAAiFH,QAAjF,sCAAqHC,QAArH,OAArB;AACA,cAAIV,GAAG,aAAM,qEAAYA,GAAlB,qDAAgEW,KAAhE,wBAAmFH,SAAnF,2BAAP;AACA,cAAIV,IAAI,GAAG,KAAKxC,IAAL,CAAUyC,GAAV,CAAcC,GAAd,CAAX;AACA,cAAMG,OAAO,GAAGL,IAAI,CAACM,IAAL,CACZ,2DAAI,UAACC,IAAD,EAAU;AACV,gBAAKA,IAAI,IAAI,EAAT,IAAiBA,IAAI,IAAIQ,SAA7B,EAAyC;AACrC,oBAAI,CAACC,WAAL,CAAiBzC,IAAI,CAACC,SAAL,CAAe+B,IAAI,CAAC,CAAD,CAAnB,CAAjB;;AACA,qBAAOA,IAAP;AACH,aAHD,MAGO;AACH,qBAAO,gDAAWc,KAAX,CAAiB,kBAAjB,CAAP;AACH;AACJ,WAPD,CADY,CAAhB;AAUA,iBAAOhB,OAAP;AACH;;;2CAE0BuB,O,EAAS;AAChCvD,wBAAc,CAACC,OAAf,CAAuB,gBAAvB,EAAyCsD,OAAzC;AACH;;;4CAE0B;AACvB,iBAAOvD,cAAc,CAACK,OAAf,CAAuB,gBAAvB,CAAP;AACH;;;uCAEsBmD,Y,EAAsBN,S,EAAmB;AAAA;;AAC5D,cAAIV,KAAK,GAAGC,SAAS,CAAC,8DAAD,CAAT,GAA4Ee,YAA5E,GAA2Ff,SAAS,CAAC,GAAD,CAAhH;AACA,cAAIZ,GAAG,GAAG,UAAG,qEAAYA,GAAf,gDAA+DW,KAA/D,GAAuE,aAAvE,GAAuFU,SAAvF,GAAmG,4BAA7G;AAEA,cAAIvB,IAAJ;AACAA,cAAI,GAAG,KAAKxC,IAAL,CAAUyC,GAAV,CAAcC,GAAd,CAAP;AAEA,eAAK1C,IAAL,CAAUyC,GAAV,CAAcC,GAAd,EAAmB4B,SAAnB,CAA6B,UAAAN,GAAG,EAAI;AAChC,gBAAIA,GAAG,CAAC,CAAD,CAAP,EAAY;AACR,oBAAI,CAACO,eAAL,CAAqBxD,IAAI,CAACC,SAAL,CAAegD,GAAG,CAAC,CAAD,CAAlB,CAArB;AACH;AACJ,WAJD;AAKH;;;wCAEuBQ,W,EAAa;AACjC3D,wBAAc,CAACC,OAAf,CAAuB,aAAvB,EAAsC0D,WAAtC;AACH;;;yCAEuB;AACpB,iBAAQ3D,cAAc,CAACK,OAAf,CAAuB,aAAvB,CAAR;AACH;;;sCAEoBuD,K,EAAO;AACxB5D,wBAAc,CAACC,OAAf,CAAuB,YAAvB,EAAqC2D,KAArC;AACH;;;wCAEsB;AACnB,iBAAO5D,cAAc,CAACK,OAAf,CAAuB,YAAvB,CAAP;AACH;;;wCAEsBwD,K,EAAO;AAC1B;AACA7D,wBAAc,CAACC,OAAf,CAAuB,cAAvB,EAAuC4D,KAAvC;AACH;;;0CAEwB;AACrB;AACA,iBAAO7D,cAAc,CAACK,OAAf,CAAuB,cAAvB,CAAP;AACH;;;uCAEqByD,Q,EAAU;AAC5B;AACA9D,wBAAc,CAACC,OAAf,CAAuB,aAAvB,EAAsC6D,QAAtC;AACH;;;yCAEuB;AACpB;AACA,iBAAO9D,cAAc,CAACK,OAAf,CAAuB,aAAvB,CAAP;AACH;;;gCAEcwD,K,EAAO;AAClB;AACA7D,wBAAc,CAACC,OAAf,CAAuB,MAAvB,EAA+B4D,KAA/B;AACH;;;kCAEgB;AACb;AACA,iBAAO7D,cAAc,CAACK,OAAf,CAAuB,MAAvB,CAAP;AACH;;;oCAGmB0D,O,EAAS;AACzB/D,wBAAc,CAACC,OAAf,CAAuB,SAAvB,EAAkC8D,OAAlC;AACH;;;qCACmB;AAChB,cAAIA,OAAO,GAAG/D,cAAc,CAACK,OAAf,CAAuB,SAAvB,CAAd;AACA,iBAAO0D,OAAP;AACH;;;iCAEevC,I,EAAkB;AAC9B,iBAAO,KAAKQ,OAAL,CAAa,MAAb,EAAqB,UAArB,EAAiCR,IAAjC,CAAP;AACH;;;8BAEYA,I,EAAkB;AAC3B,iBAAO,KAAKQ,OAAL,CAAa,KAAb,EAAoB,OAApB,EAA6BR,IAA7B,CAAP;AACH;;;qCAEmBA,I,EAAce,Q,EAAUyB,O,EAAO;AAC/C,iBAAO,KAAKC,eAAL,CAAqBzC,IAArB,EAA2Be,QAA3B,EAAqCyB,OAArC,CAAP;AACH;;;kCAEa;AACV,iBAAO,KAAKhC,OAAL,CAAa,KAAb,EAAoB,SAApB,CAAP;AACH;;;iCAEY;AACT,eAAKW,WAAL,CAAiB,EAAjB;AACA,eAAKG,MAAL,CAAY,EAAZ;AACA,eAAKC,SAAL,CAAe,EAAf,EAHS,CAIT;AACH;;;;;;;uBApWQ7D,Y,EAAY,uH;AAAA,K;;;aAAZA,Y;AAAY,eAAZA,YAAY;;;;;sEAAZA,Y,EAAY;cADxB;AACwB,Q","file":"default~calendar-calendar-module~dashboards-analytics-analytics-module~e-commerce-e-commerce-module~~b9cc0edb-es5.js","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { ActivatedRouteSnapshot, Resolve, RouterStateSnapshot } from '@angular/router';\r\nimport { BehaviorSubject, Observable } from 'rxjs';\r\nimport { environment } from 'environments/environment';\r\nimport { map } from 'rxjs/operators';\r\n\r\nexport interface UserDetails {\r\n    id: string;\r\n    streetAddr1: string;\r\n    email: string;\r\n    phone: string;\r\n    Pagina_Web: string;\r\n    R8184516: string;\r\n}\r\n\r\ninterface TokenResponse {\r\n    sessionId: string;\r\n    status: number;\r\n}\r\n\r\ninterface TokenResponseid {\r\n    id: string;\r\n}\r\n\r\nexport interface TokenPayload {\r\n    email: string;\r\n    password: string;\r\n    name?: string;\r\n}\r\n\r\n@Injectable()\r\nexport class LoginService\r\n{\r\n    routeParams: any;\r\n    token: any;\r\n    tipo: any;\r\n    onOrderChanged: BehaviorSubject<any>;\r\n    private id: string;\r\n\r\n    /**\r\n     * Constructor\r\n     *\r\n     * @param {HttpClient} _httpClient\r\n     */\r\n    constructor(\r\n        private http: HttpClient\r\n    )\r\n    {\r\n\r\n    }\r\n\r\n    public saveTipo(tipo: string): void {\r\n        this.setLocalItem('tipo-contacto', tipo, this.getTimeExpire());\r\n        this.tipo = tipo;\r\n    }\r\n\r\n    public getTipo(): string {\r\n        let tipo = this.getLocalItem('tipo-contacto');\r\n        return tipo;\r\n    }\r\n\r\n    public saveToken(token: string): void {\r\n        this.setLocalItem('mean-token', token, this.getTimeExpire());\r\n        this.token = token;\r\n    }\r\n\r\n    public getToken(): string {\r\n        let LocalItem = this.getLocalItem('mean-token');\r\n        return LocalItem;\r\n    }\r\n\r\n    private saveId(id: string): void {\r\n        this.setLocalItem('mean-id', id, this.getTimeExpire());\r\n        this.id = id;\r\n    }\r\n\r\n    private saveContactoId(id: string): void {\r\n        this.setLocalItem('contactoId', id, this.getTimeExpire());\r\n    }\r\n\r\n    setLocalItem(key, id, time?) {\r\n        time = time || 0;\r\n        let timestamp = this.setTimeToLive(time);\r\n        let storageObj = {\r\n            'timestamp': timestamp,\r\n            'value': id\r\n        };\r\n        //console.log('lo que se va a almacenar en el storage ' + key);\r\n        //console.log(storageObj);\r\n        sessionStorage.setItem(key, JSON.stringify(storageObj));\r\n    }\r\n\r\n    //funcion get\r\n    getLocalItem(key) {\r\n        let storage = sessionStorage.getItem(key);\r\n        //console.log('lo que tiene el storage en el get ' + key);\r\n        //console.log(storage);\r\n        let item = null;\r\n\r\n        if (storage) {\r\n            item = JSON.parse(storage);\r\n        }\r\n\r\n        if (item) { // If item exists evaluate, else return\r\n            let time = this.evaluateTimeToLive(item.timestamp);\r\n            if (time) {\r\n                //console.log('el tiempo de vida es correcto');\r\n                return item.value;\r\n            } else {\r\n                //console.log('no alcanzo');\r\n                sessionStorage.removeItem(key);\r\n                return false;\r\n            }\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n\r\n    setTimeToLive(lifespan) {\r\n        let currentTime = new Date().getTime();\r\n        let timeToLive;\r\n        if (lifespan !== 0) {\r\n            timeToLive = currentTime + lifespan;\r\n        } else {\r\n            timeToLive = 0; // Lifespan is now infinite and dependent only browser\r\n        }\r\n        return timeToLive;\r\n    }\r\n\r\n    // obtiene la fecha actual y suma el tiempo limite de sesión\r\n    getTimeExpire() {\r\n        var min = 60 * 1000;\r\n        var after = 30 * min;\r\n        return after;\r\n    }\r\n\r\n    //Evalua el tiempo determina para la sesión\r\n    evaluateTimeToLive(timestamp) {\r\n\r\n        //console.log('la fecha a evaluar');\r\n        //console.log(timestamp);\r\n        let currentTime = new Date().getTime();\r\n        if (currentTime <= timestamp || timestamp === 0) {\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    // tslint:disable-next-line:comment-format\r\n    //remove the item session from the storage\r\n    removeLocalItem(key) {\r\n        return sessionStorage.removeItem(key);\r\n    }\r\n\r\n    public getId(): string {\r\n        let id = this.getLocalItem('mean-id');\r\n        return id;\r\n    }\r\n\r\n    public getUserDetails(): UserDetails {\r\n        const token = this.getToken();\r\n        let payload;\r\n        if (token) {\r\n            payload = token.split('.')[1];\r\n            payload = window.atob(payload);\r\n            return JSON.parse(payload);\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    public getIdUserLoggedIn(): string {\r\n        return this.getId();\r\n    }\r\n\r\n    public isLoggedIn(): boolean {\r\n        const user = this.getToken();\r\n        if (user) {\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    private request(method: 'post' | 'get', type: 'login' | 'register' | 'profile', user?: TokenPayload): Observable<any> {\r\n        let base;\r\n\r\n        if (method === 'get') {\r\n            //console.log('lega aaaa');\r\n            base = this.http.get(`${environment.url}rest/api/login?loginName=${environment.usr}&password=${environment.pass}&output=json`); //, user);\r\n        } else {\r\n            // base = this.http.post(`/api/${type}`, { headers: { Authorization: `Bearer ${this.getToken()}` }});\r\n        }\r\n\r\n        const request = base.pipe(\r\n            map((data: TokenResponse) => {\r\n                console.log(data);\r\n                if (data.sessionId) {\r\n                    //this.getIdUser(user.email, user.password);\r\n                }\r\n                return data;\r\n            })\r\n        );\r\n        return request;\r\n    }\r\n\r\n    public getIdUser(username: string, password: string, sessionId: string): Observable<any> {\r\n        let query = \"select R15454162,name,id,tipo%23value from Contacto where Usuario_Portal ='\" + username + encodeURI(\"'\") + \" and Password_Portal='\" + password + encodeURI(\"'\");\r\n        let url = `${environment.url}rest/api/selectQuery?maxRows=1000&query=` + query + \"&sessionId=\" + sessionId + \"&output=json&maxRows=1\";\r\n        let base = this.http.get(url);\r\n        const request = base.pipe(\r\n            map((data) => {\r\n                if ((data != \"\") && (data != undefined)) {\r\n                    this.SaveProfile(JSON.stringify(data[0]));\r\n                    this.saveContactoId(data[0][2]);\r\n                    this.saveTipo(data[0][3]);\r\n                    //this.getEnterpriseId(data[0][0], sessionId);\r\n\r\n                    this.saveId(data[0][0]);\r\n                    this.saveToken(sessionId);\r\n                } else {\r\n                    this.saveContactoId('');\r\n                    this.SaveProfile(\"\");\r\n                    this.saveId(\"\");\r\n                    this.saveToken(\"\");\r\n                    this.saveTipo(\"\");\r\n                    return Observable.throw(\"Error al loguear\");\r\n                }\r\n                return data;\r\n            })\r\n        );\r\n        return request;\r\n    }\r\n\r\n    public getIdUserByEmail(username: string, sessionId: string): Observable<any> {\r\n        let query = encodeURI(\"select id,name,Correo_Electronico,Telefono_movil,NombreCiudad,contrasea,id,NombreDepartamento from Contactos where Correo_Electronico='\") + username + encodeURI(\"'\");\r\n        let url = `${environment.url}rest/api/selectQuery?maxRows=1000&query=` + query + \"&sessionId=\" + sessionId + \"&output=json&maxRows=1\";\r\n        let base = this.http.get(url);\r\n        const request = base.pipe(\r\n            map((data) => {\r\n                if ((data != \"\") && (data != undefined)) {\r\n                    return data;\r\n                } else {\r\n                    return Observable.throw(\"Error al loguear\");\r\n                }\r\n            })\r\n        );\r\n        return request;\r\n    }\r\n\r\n\r\n    public getEnterpriseId(idCustomer: string, sessionid: string): Observable<any> {\r\n        // solo status = Creado o con este id: 8168024 lo deja pasar\r\n        const query = encodeURI(`Select Razon_Social,NIT,Telefono,Direccion,URL_Logo,IdCiudadTxt from Cliente1 where id =${idCustomer}`);\r\n        const url = `${environment.url}rest/api/selectQuery?maxRows=1000&query=` + query + \"&sessionId=\" + sessionid + \"&output=json&maxRows=10000\";\r\n        let base;\r\n        base = this.http.get(url);\r\n        return base.pipe(\r\n            map((res) => {\r\n                if (res[0]) {\r\n                    this.setCiudadesTxt(res[0][5]);\r\n                    this.saveEnterpriseData(res.toString());\r\n                }\r\n                return res;\r\n            })\r\n        );\r\n    }\r\n\r\n    public getLoginPersona(username: string, password: string, sessionId: string): Observable<any> {\r\n        this.saveToken(sessionId);\r\n        let query = encodeURI(`select id,name,Numero_Documento,email from Candidato where Numero_Documento='${username}' and Password_Paciente='${password}'`);\r\n        let url = `${environment.url}rest/api/selectQuery?maxRows=1000&query=${query}&sessionId=${sessionId}&output=json&maxRows=1`;\r\n        let base = this.http.get(url);\r\n        const request = base.pipe(\r\n            map((data) => {\r\n                if ((data != \"\") && (data != undefined)) {\r\n                    this.SaveProfile(JSON.stringify(data[0]));\r\n                    return data;\r\n                } else {\r\n                    return Observable.throw(\"Error al loguear\");\r\n                }\r\n            })\r\n        );\r\n        return request;\r\n    }\r\n\r\n    private saveEnterpriseData(entData) {\r\n        sessionStorage.setItem(\"EntrepriseData\", entData);\r\n    }\r\n\r\n    public GetEnterpriseData() {\r\n        return sessionStorage.getItem(\"EntrepriseData\");\r\n    }\r\n\r\n    private getContactData(CommercialId: string, sessionid: string) {\r\n        let query = encodeURI(\"select name,phone,mobilePhone,email from usuarios where id='\") + CommercialId + encodeURI(\"'\");\r\n        let url = `${environment.url}rest/api/selectQuery?maxRows=1000&query=` + query + \"&sessionId=\" + sessionid + \"&output=json&maxRows=10000\";\r\n\r\n        let base;\r\n        base = this.http.get(url);\r\n\r\n        this.http.get(url).subscribe(res => {\r\n            if (res[0]) {\r\n                this.SaveContactData(JSON.stringify(res[0]));\r\n            }\r\n        });\r\n    }\r\n\r\n    private SaveContactData(ContactData) {\r\n        sessionStorage.setItem(\"ContactData\", ContactData);\r\n    }\r\n\r\n    public GetContactData() {\r\n        return (sessionStorage.getItem(\"ContactData\"));\r\n    }\r\n\r\n    public setEmailLogin(email) {\r\n        sessionStorage.setItem(\"emailLogin\", email);\r\n    }\r\n\r\n    public getEmailLogin() {\r\n        return sessionStorage.getItem(\"emailLogin\");\r\n    }\r\n\r\n    public setLineaNegocio(linea) {\r\n        //console.log(\"la linea \" + linea);\r\n        sessionStorage.setItem(\"lineaNegocio\", linea);\r\n    }\r\n\r\n    public getLineaNegocio() {\r\n        //console.log(\"la que entrega linea \" + sessionStorage.getItem(\"lineaNegocio\"));\r\n        return sessionStorage.getItem(\"lineaNegocio\");\r\n    }\r\n\r\n    public setCiudadesTxt(ciudades) {\r\n        //console.log(\"la linea \" + linea);\r\n        sessionStorage.setItem(\"ciudadesTxt\", ciudades);\r\n    }\r\n\r\n    public getCiudadesTxt() {\r\n        //console.log(\"la que entrega linea \" + sessionStorage.getItem(\"lineaNegocio\"));\r\n        return sessionStorage.getItem(\"ciudadesTxt\");\r\n    }\r\n\r\n    public setLogo(linea) {\r\n        //console.log(\"el logo \" + linea);\r\n        sessionStorage.setItem(\"logo\", linea);\r\n    }\r\n\r\n    public getLogo() {\r\n        //console.log(\"getLogo \" + sessionStorage.getItem(\"logo\"));\r\n        return sessionStorage.getItem(\"logo\");\r\n    }\r\n\r\n\r\n    private SaveProfile(profile) {\r\n        sessionStorage.setItem(\"Profile\", profile);\r\n    }\r\n    public GetProfile() {\r\n        var profile = sessionStorage.getItem(\"Profile\");\r\n        return profile;\r\n    }\r\n\r\n    public register(user: TokenPayload): Observable<any> {\r\n        return this.request('post', 'register', user);\r\n    }\r\n\r\n    public login(user: TokenPayload): Observable<any> {\r\n        return this.request('get', 'login', user);\r\n    }\r\n\r\n    public loginPersona(user: string, password, session): Observable<any> {\r\n        return this.getLoginPersona(user, password, session);\r\n    }\r\n\r\n    public profile(): Observable<any> {\r\n        return this.request('get', 'profile');\r\n    }\r\n\r\n    public logout(): void {\r\n        this.SaveProfile(\"\");\r\n        this.saveId(\"\");\r\n        this.saveToken(\"\");\r\n        //this.router.navigateByUrl('/authentication/login');\r\n    }\r\n}\r\n"]}