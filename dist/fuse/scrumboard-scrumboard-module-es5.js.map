{"version":3,"sources":["webpack:///src/app/main/apps/scrumboard/board.model.ts","webpack:///src/app/main/apps/scrumboard/board/add-list/add-list.component.ts","webpack:///src/app/main/apps/scrumboard/board/add-list/add-list.component.html","webpack:///src/app/main/apps/scrumboard/board/board.component.ts","webpack:///src/app/main/apps/scrumboard/board/board.component.html","webpack:///src/app/main/apps/scrumboard/board/dialogs/card/card.component.ts","webpack:///src/app/main/apps/scrumboard/board/dialogs/card/card.component.html","webpack:///src/app/main/apps/scrumboard/board/dialogs/card/label-selector/label-selector.component.ts","webpack:///src/app/main/apps/scrumboard/board/dialogs/card/label-selector/label-selector.component.html","webpack:///src/app/main/apps/scrumboard/board/edit-board-name/edit-board-name.component.ts","webpack:///src/app/main/apps/scrumboard/board/edit-board-name/edit-board-name.component.html","webpack:///src/app/main/apps/scrumboard/board/list/add-card/add-card.component.ts","webpack:///src/app/main/apps/scrumboard/board/list/add-card/add-card.component.html","webpack:///src/app/main/apps/scrumboard/board/list/card/card.component.ts","webpack:///src/app/main/apps/scrumboard/board/list/card/card.component.html","webpack:///src/app/main/apps/scrumboard/board/list/edit-list-name/edit-list-name.component.ts","webpack:///src/app/main/apps/scrumboard/board/list/edit-list-name/edit-list-name.component.html","webpack:///src/app/main/apps/scrumboard/board/list/list.component.ts","webpack:///src/app/main/apps/scrumboard/board/list/list.component.html","webpack:///src/app/main/apps/scrumboard/board/sidenavs/settings/board-color-selector/board-color-selector.component.ts","webpack:///src/app/main/apps/scrumboard/board/sidenavs/settings/board-color-selector/board-color-selector.component.html","webpack:///src/app/main/apps/scrumboard/board/sidenavs/settings/settings.component.ts","webpack:///src/app/main/apps/scrumboard/board/sidenavs/settings/settings.component.html","webpack:///src/app/main/apps/scrumboard/card.model.ts","webpack:///src/app/main/apps/scrumboard/list.model.ts","webpack:///src/app/main/apps/scrumboard/scrumboard.component.ts","webpack:///src/app/main/apps/scrumboard/scrumboard.component.html","webpack:///src/app/main/apps/scrumboard/scrumboard.module.ts","webpack:///src/app/main/apps/scrumboard/scrumboard.service.ts"],"names":["sampleLabels","id","name","color","sampleMembers","avatar","Board","board","uri","generateGUID","settings","subscribed","cardCoverImages","lists","cards","members","labels","ScrumboardBoardAddListComponent","_formBuilder","formActive","listAdded","form","group","focusNameField","setTimeout","nameInputField","nativeElement","focus","valid","next","getRawValue","selector","templateUrl","styleUrls","encapsulation","None","ScrumboardBoardComponent","_activatedRoute","_location","_scrumboardService","_unsubscribeAll","onBoardChanged","pipe","subscribe","complete","newListName","addList","newName","updateBoard","go","ev","onBoardNameChanged","onDrop","onListAdd","animations","$event","stopPropagation","matDialogRef","ScrumboardCardDialogComponent","_data","_matDialog","toggleInArray","card","find","_card","cardId","list","_list","listId","due","updateCard","attachmentId","idAttachmentCover","attachment","attachments","splice","indexOf","checklist","checklists","checkItems","checkedItems","allCheckedItems","allCheckItems","checkItem","checked","checkItemsChecked","item","length","updateCheckedCount","checkList","checkItemVal","value","newCheckItem","push","setValue","checklistTitle","resetForm","checklistMenu","closeMenu","newCheckListTitleField","newCommentText","newComment","idMember","message","time","comments","unshift","confirmDialogRef","open","disableClose","componentInstance","confirmMessage","afterClosed","result","close","removeCard","ScrumboardLabelSelectorComponent","cardLabelsChanged","labelsMenuView","newLabel","Object","assign","ScrumboardEditBoardNameComponent","formBuilder","boardNameChanged","encodeURIComponent","replace","toLowerCase","ScrumboardBoardAddCardComponent","cardAdded","cardName","ScrumboardBoardCardComponent","snapshot","data","filter","cardDate","Date","ScrumboardBoardEditListNameComponent","listNameChanged","ScrumboardBoardListComponent","newCardName","addCard","listScroll","scrollToBottom","removeList","dialogRef","panelClass","response","onListNameChanged","onCardAdd","ScrumboardBoardColorSelectorComponent","colors","all","ScrumboardBoardSettingsSidenavComponent","scrumboardService","view","Card","description","idMembers","idLabels","activities","List","idCards","ScrumboardComponent","_router","onBoardsChanged","boards","newBoard","createNewBoard","then","navigate","routes","path","component","resolve","scrumboard","redirectTo","ScrumboardModule","forChild","declarations","imports","providers","entryComponents","ScrumboardService","_httpClient","route","state","routeParams","params","Promise","reject","getBoards","get","boardId","newCard","map","newList","index","post","BoardResolve","getBoard","paramMap"],"mappings":"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","file":"scrumboard-scrumboard-module-es5.js","sourcesContent":["import { FuseUtils } from '@fuse/utils';\r\n\r\nimport { List } from './list.model';\r\nimport { Card } from './card.model';\r\n\r\nconst sampleLabels = [\r\n    {\r\n        id   : '56027e4119ad3a5dc28b36cd',\r\n        name : 'Design',\r\n        color: 'red-500'\r\n    },\r\n    {\r\n        id   : '5640635e19ad3a5dc21416b2',\r\n        name : 'App',\r\n        color: 'blue-500'\r\n    },\r\n    {\r\n        id   : '6540635g19ad3s5dc31412b2',\r\n        name : 'Feature',\r\n        color: 'green-400'\r\n    }\r\n];\r\n\r\nconst sampleMembers = [\r\n    {\r\n        id    : '56027c1930450d8bf7b10758',\r\n        name  : 'Alice Freeman',\r\n        avatar: 'assets/images/avatars/alice.jpg'\r\n    },\r\n    {\r\n        id    : '26027s1930450d8bf7b10828',\r\n        name  : 'Danielle Obrien',\r\n        avatar: 'assets/images/avatars/danielle.jpg'\r\n    },\r\n    {\r\n        id    : '76027g1930450d8bf7b10958',\r\n        name  : 'James Lewis',\r\n        avatar: 'assets/images/avatars/james.jpg'\r\n    },\r\n    {\r\n        id    : '36027j1930450d8bf7b10158',\r\n        name  : 'Vincent Munoz',\r\n        avatar: 'assets/images/avatars/vincent.jpg'\r\n    }\r\n];\r\n\r\nexport class Board\r\n{\r\n    name: string;\r\n    uri: string;\r\n    id: string;\r\n    settings: {\r\n        color: string,\r\n        subscribed: boolean,\r\n        cardCoverImages: boolean\r\n    };\r\n    lists: List[];\r\n    cards: Card[];\r\n    members: {\r\n        id: string,\r\n        name: string,\r\n        avatar: string\r\n    }[];\r\n    labels: {\r\n        id: string,\r\n        name: string,\r\n        color: string\r\n    }[];\r\n\r\n    /**\r\n     * Constructor\r\n     *\r\n     * @param board\r\n     */\r\n    constructor(board)\r\n    {\r\n        this.name = board.name || 'Untitled Board';\r\n        this.uri = board.uri || 'untitled-board';\r\n        this.id = board.id || FuseUtils.generateGUID();\r\n        this.settings = board.settings || {\r\n            color          : '',\r\n            subscribed     : true,\r\n            cardCoverImages: true\r\n        };\r\n        this.lists = [];\r\n        this.cards = [];\r\n        this.members = board.members || sampleMembers;\r\n        this.labels = board.labels || sampleLabels;\r\n    }\r\n}\r\n","import { Component, EventEmitter, Output, ViewChild, ViewEncapsulation } from '@angular/core';\r\nimport { FormBuilder, FormGroup } from '@angular/forms';\r\n\r\n@Component({\r\n    selector     : 'scrumboard-board-add-list',\r\n    templateUrl  : './add-list.component.html',\r\n    styleUrls    : ['./add-list.component.scss'],\r\n    encapsulation: ViewEncapsulation.None\r\n})\r\nexport class ScrumboardBoardAddListComponent\r\n{\r\n    formActive: boolean;\r\n    form: FormGroup;\r\n\r\n    @Output()\r\n    listAdded: EventEmitter<any>;\r\n\r\n    @ViewChild('nameInput')\r\n    nameInputField;\r\n\r\n    /**\r\n     * Constructor\r\n     *\r\n     * @param {FormBuilder} _formBuilder\r\n     */\r\n    constructor(\r\n        private _formBuilder: FormBuilder\r\n    )\r\n    {\r\n        // Set the defaults\r\n        this.formActive = false;\r\n        this.listAdded = new EventEmitter();\r\n    }\r\n\r\n    // -----------------------------------------------------------------------------------------------------\r\n    // @ Public methods\r\n    // -----------------------------------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Open form\r\n     */\r\n    openForm(): void\r\n    {\r\n        this.form = this._formBuilder.group({\r\n            name: ['']\r\n        });\r\n        this.formActive = true;\r\n        this.focusNameField();\r\n    }\r\n\r\n    /**\r\n     * Close form\r\n     */\r\n    closeForm(): void\r\n    {\r\n        this.formActive = false;\r\n    }\r\n\r\n    /**\r\n     * Focus to the name field\r\n     */\r\n    focusNameField(): void\r\n    {\r\n        setTimeout(() => {\r\n            this.nameInputField.nativeElement.focus();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * On form submit\r\n     */\r\n    onFormSubmit(): void\r\n    {\r\n        if ( this.form.valid )\r\n        {\r\n            this.listAdded.next(this.form.getRawValue().name);\r\n            this.formActive = false;\r\n        }\r\n    }\r\n\r\n}\r\n","<div class=\"list new-list mat-elevation-z1\">\r\n\r\n    <button *ngIf=\"!formActive\" mat-button class=\"new-list-form-button\" (click)=\"openForm()\">\r\n        <div fxLayout=\"row\" fxLayoutAlign=\"start center\">\r\n            <mat-icon class=\"red\">add</mat-icon>\r\n            <span>Add a list</span>\r\n        </div>\r\n    </button>\r\n\r\n    <form *ngIf=\"formActive\" class=\"new-list-form\" [formGroup]=\"form\" (submit)=\"onFormSubmit()\"\r\n          fxLayout=\"row\" fxLayoutAlign=\"start center\" fxFlex=\"1 0 auto\">\r\n\r\n        <input formControlName=\"name\" #nameInput fxFlex placeholder=\"Write a list Name\">\r\n\r\n        <button mat-icon-button fxFlex=\"0 1 auto\">\r\n            <mat-icon>check</mat-icon>\r\n        </button>\r\n        <button mat-icon-button fxFlex=\"0 1 auto\" (click)=\"closeForm()\">\r\n            <mat-icon>close</mat-icon>\r\n        </button>\r\n    </form>\r\n</div>\r\n\r\n","import { Component, OnDestroy, OnInit, ViewEncapsulation } from '@angular/core';\r\nimport { Location } from '@angular/common';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { Subject } from 'rxjs';\r\nimport { takeUntil } from 'rxjs/operators';\r\n\r\nimport { fuseAnimations } from '@fuse/animations';\r\n\r\nimport { ScrumboardService } from 'app/main/apps/scrumboard/scrumboard.service';\r\nimport { List } from 'app/main/apps/scrumboard/list.model';\r\n\r\n@Component({\r\n    selector     : 'scrumboard-board',\r\n    templateUrl  : './board.component.html',\r\n    styleUrls    : ['./board.component.scss'],\r\n    encapsulation: ViewEncapsulation.None,\r\n    animations   : fuseAnimations\r\n})\r\nexport class ScrumboardBoardComponent implements OnInit, OnDestroy\r\n{\r\n    board: any;\r\n\r\n    // Private\r\n    private _unsubscribeAll: Subject<any>;\r\n\r\n    constructor(\r\n        private _activatedRoute: ActivatedRoute,\r\n        private _location: Location,\r\n        private _scrumboardService: ScrumboardService\r\n    )\r\n    {\r\n        // Set the private defaults\r\n        this._unsubscribeAll = new Subject();\r\n    }\r\n\r\n    // -----------------------------------------------------------------------------------------------------\r\n    // @ Lifecycle hooks\r\n    // -----------------------------------------------------------------------------------------------------\r\n\r\n    /**\r\n     * On init\r\n     */\r\n    ngOnInit(): void\r\n    {\r\n        this._scrumboardService.onBoardChanged\r\n            .pipe(takeUntil(this._unsubscribeAll))\r\n            .subscribe(board => {\r\n                this.board = board;\r\n            });\r\n    }\r\n\r\n    /**\r\n     * On destroy\r\n     */\r\n    ngOnDestroy(): void\r\n    {\r\n        // Unsubscribe from all subscriptions\r\n        this._unsubscribeAll.next();\r\n        this._unsubscribeAll.complete();\r\n    }\r\n\r\n    // -----------------------------------------------------------------------------------------------------\r\n    // @ Public methods\r\n    // -----------------------------------------------------------------------------------------------------\r\n\r\n    /**\r\n     * On list add\r\n     *\r\n     * @param newListName\r\n     */\r\n    onListAdd(newListName): void\r\n    {\r\n        if ( newListName === '' )\r\n        {\r\n            return;\r\n        }\r\n\r\n        this._scrumboardService.addList(new List({name: newListName}));\r\n    }\r\n\r\n    /**\r\n     * On board name changed\r\n     *\r\n     * @param newName\r\n     */\r\n    onBoardNameChanged(newName): void\r\n    {\r\n        this._scrumboardService.updateBoard();\r\n        this._location.go('/apps/scrumboard/boards/' + this.board.id + '/' + this.board.uri);\r\n    }\r\n\r\n    /**\r\n     * On drop\r\n     *\r\n     * @param ev\r\n     */\r\n    onDrop(ev): void\r\n    {\r\n        this._scrumboardService.updateBoard();\r\n    }\r\n}\r\n","<mat-sidenav-container>\r\n\r\n    <div id=\"board\">\r\n\r\n        <!-- HEADER -->\r\n        <div class=\"header p-16 p-md-24\" [ngClass]=\"board.settings.color\" fxLayout=\"column\">\r\n\r\n            <div class=\"header-content\" fxLayout=\"row wrap\" fxLayoutAlign=\"space-between\" fxFlex=\"1 0 auto\">\r\n\r\n                <!-- BOARD SELECTION BUTTON -->\r\n                <div fxLayout=\"row\" fxLayoutAlign=\"center center\" fxFlexOrder=\"2\" fxFlexOrder.gt-xs=\"1\">\r\n                    <button mat-raised-button class=\"header-boards-button\"\r\n                            [ngClass]=\"board.settings.color+'-800'\"\r\n                            routerLink=\"/apps/scrumboard/boards\"\r\n                            aria-label=\"boards button\">\r\n                        <mat-icon class=\"mr-8\">assessment</mat-icon>\r\n                        <span>BOARDS</span>\r\n                    </button>\r\n                </div>\r\n                <!-- / BOARD SELECTION BUTTON -->\r\n\r\n                <!-- BOARD NAME -->\r\n                <div class=\"header-board-name mb-8 mb-md-0\"\r\n                     fxLayout=\"row\" fxLayoutAlign=\"center center\"\r\n                     fxLayout.gt-xs=\"row\" fxLayoutAlign.gt-xs=\"center center\"\r\n                     fxFlex=\"1 0 100%\" fxFlex.gt-xs=\"1 0 auto\"\r\n                     fxFlexOrder=\"1\" fxFlexOrder.gt-xs=\"2\">\r\n                    <mat-icon *ngIf=\"board.settings.subscribed\" class=\"board-subscribe s-16\">remove_red_eye</mat-icon>\r\n                    <scrumboard-edit-board-name\r\n                        [board]=\"board\"\r\n                        (boardNameChanged)=\"onBoardNameChanged($event)\">\r\n                    </scrumboard-edit-board-name>\r\n                </div>\r\n                <!-- / BOARD NAME -->\r\n\r\n                <!-- TOOLBAR -->\r\n                <div class=\"toolbar\" fxLayout=\"row\" fxLayoutAlign=\"space-between center\" fxFlexOrder=\"3\">\r\n\r\n                    <!-- BOARD SETTINGS BUTTON -->\r\n                    <button mat-icon-button (click)=\"settingsSidenav.toggle()\"\r\n                            aria-label=\"Settings\" matTooltip=\"Settings\">\r\n                        <mat-icon>settings</mat-icon>\r\n                    </button>\r\n                    <!-- / BOARD SETTINGS BUTTON -->\r\n                </div>\r\n                <!-- / TOOLBAR -->\r\n\r\n            </div>\r\n\r\n        </div>\r\n        <!-- / HEADER -->\r\n\r\n        <div fxFlex class=\"board-content-wrapper p-16 p-md-24\">\r\n\r\n            <!-- BOARD -->\r\n            <div class=\"board-content ngx-dnd-container p-16 p-md-24\" fxLayout=\"row\"\r\n                 ngxDroppable=\"list\" [model]=\"board.lists\" (out)=\"onDrop($event)\"\r\n                 [@animateStagger]=\"{value:'50'}\">\r\n\r\n                <!-- LIST -->\r\n                <scrumboard-board-list\r\n                    class=\"scrumboard-board-list list-wrapper ngx-dnd-item\"\r\n                    ngxDraggable\r\n                    *ngFor=\"let list of board.lists\"\r\n                    [model]=\"list\"\r\n                    [list]=\"list\"\r\n                    [@animate]=\"{value:'*',params:{duration:'350ms',x:'100%'}}\">\r\n                </scrumboard-board-list>\r\n                <!-- / LIST -->\r\n\r\n                <!-- NEW LIST BUTTON-->\r\n                <scrumboard-board-add-list class=\"new-list-wrapper\" (listAdded)=\"onListAdd($event)\"\r\n                                           ngxDraggable [moves]=\"false\"\r\n                                           [@animate]=\"{value:'*',params:{duration:'350ms',x:'100%'}}\">\r\n                </scrumboard-board-add-list>\r\n                <!-- / NEW LIST BUTTON-->\r\n\r\n            </div>\r\n            <!-- / BOARD -->\r\n        </div>\r\n        <!-- primary content -->\r\n    </div>\r\n\r\n    <mat-sidenav #settingsSidenav position=\"end\">\r\n        <scrumboard-board-settings></scrumboard-board-settings>\r\n    </mat-sidenav>\r\n\r\n</mat-sidenav-container>\r\n","import { Component, Inject, OnDestroy, OnInit, ViewChild, ViewEncapsulation } from '@angular/core';\r\nimport { NgForm } from '@angular/forms';\r\nimport { MAT_DIALOG_DATA, MatDialog, MatDialogRef } from '@angular/material/dialog';\r\nimport { MatMenuTrigger } from '@angular/material/menu';\r\nimport { Subject } from 'rxjs';\r\n\r\nimport { FuseConfirmDialogComponent } from '@fuse/components/confirm-dialog/confirm-dialog.component';\r\nimport { FuseUtils } from '@fuse/utils';\r\n\r\nimport { ScrumboardService } from 'app/main/apps/scrumboard/scrumboard.service';\r\nimport { takeUntil } from 'rxjs/operators';\r\n\r\n@Component({\r\n    selector     : 'scrumboard-board-card-dialog',\r\n    templateUrl  : './card.component.html',\r\n    styleUrls    : ['./card.component.scss'],\r\n    encapsulation: ViewEncapsulation.None\r\n})\r\nexport class ScrumboardCardDialogComponent implements OnInit, OnDestroy\r\n{\r\n    card: any;\r\n    board: any;\r\n    list: any;\r\n\r\n    toggleInArray = FuseUtils.toggleInArray;\r\n    confirmDialogRef: MatDialogRef<FuseConfirmDialogComponent>;\r\n\r\n    @ViewChild('checklistMenuTrigger')\r\n    checklistMenu: MatMenuTrigger;\r\n\r\n    @ViewChild('newCheckListTitleField')\r\n    newCheckListTitleField;\r\n\r\n    // Private\r\n    private _unsubscribeAll: Subject<any>;\r\n\r\n    /**\r\n     * Constructor\r\n     *\r\n     * @param {MatDialogRef<ScrumboardCardDialogComponent>} matDialogRef\r\n     * @param _data\r\n     * @param {MatDialog} _matDialog\r\n     * @param {ScrumboardService} _scrumboardService\r\n     */\r\n    constructor(\r\n        public matDialogRef: MatDialogRef<ScrumboardCardDialogComponent>,\r\n        @Inject(MAT_DIALOG_DATA) private _data: any,\r\n        private _matDialog: MatDialog,\r\n        private _scrumboardService: ScrumboardService\r\n    )\r\n    {\r\n        // Set the private defaults\r\n        this._unsubscribeAll = new Subject();\r\n    }\r\n\r\n    // -----------------------------------------------------------------------------------------------------\r\n    // @ Lifecycle hooks\r\n    // -----------------------------------------------------------------------------------------------------\r\n\r\n    /**\r\n     * On init\r\n     */\r\n    ngOnInit(): void\r\n    {\r\n        this._scrumboardService.onBoardChanged\r\n            .pipe(takeUntil(this._unsubscribeAll))\r\n            .subscribe(board => {\r\n                this.board = board;\r\n\r\n                this.card = this.board.cards.find((_card) => {\r\n                    return this._data.cardId === _card.id;\r\n                });\r\n\r\n                this.list = this.board.lists.find((_list) => {\r\n                    return this._data.listId === _list.id;\r\n                });\r\n            });\r\n    }\r\n\r\n    /**\r\n     * On destroy\r\n     */\r\n    ngOnDestroy(): void\r\n    {\r\n        // Unsubscribe from all subscriptions\r\n        this._unsubscribeAll.next();\r\n        this._unsubscribeAll.complete();\r\n    }\r\n\r\n    // -----------------------------------------------------------------------------------------------------\r\n    // @ Public methods\r\n    // -----------------------------------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Remove due date\r\n     */\r\n    removeDueDate(): void\r\n    {\r\n        this.card.due = '';\r\n        this.updateCard();\r\n    }\r\n\r\n    /**\r\n     * Toggle subscribe\r\n     */\r\n    toggleSubscribe(): void\r\n    {\r\n        this.card.subscribed = !this.card.subscribed;\r\n\r\n        this.updateCard();\r\n    }\r\n\r\n    /**\r\n     * Toggle cover image\r\n     *\r\n     * @param attachmentId\r\n     */\r\n    toggleCoverImage(attachmentId): void\r\n    {\r\n        if ( this.card.idAttachmentCover === attachmentId )\r\n        {\r\n            this.card.idAttachmentCover = '';\r\n        }\r\n        else\r\n        {\r\n            this.card.idAttachmentCover = attachmentId;\r\n        }\r\n\r\n        this.updateCard();\r\n    }\r\n\r\n    /**\r\n     * Remove attachment\r\n     *\r\n     * @param attachment\r\n     */\r\n    removeAttachment(attachment): void\r\n    {\r\n        if ( attachment.id === this.card.idAttachmentCover )\r\n        {\r\n            this.card.idAttachmentCover = '';\r\n        }\r\n\r\n        this.card.attachments.splice(this.card.attachments.indexOf(attachment), 1);\r\n\r\n        this.updateCard();\r\n    }\r\n\r\n    /**\r\n     * Remove checklist\r\n     *\r\n     * @param checklist\r\n     */\r\n    removeChecklist(checklist): void\r\n    {\r\n        this.card.checklists.splice(this.card.checklists.indexOf(checklist), 1);\r\n\r\n        this.updateCard();\r\n    }\r\n\r\n    /**\r\n     * Update checked count\r\n     *\r\n     * @param list\r\n     */\r\n    updateCheckedCount(list): void\r\n    {\r\n        const checkItems = list.checkItems;\r\n        let checkedItems = 0;\r\n        let allCheckedItems = 0;\r\n        let allCheckItems = 0;\r\n\r\n        for ( const checkItem of checkItems )\r\n        {\r\n            if ( checkItem.checked )\r\n            {\r\n                checkedItems++;\r\n            }\r\n        }\r\n\r\n        list.checkItemsChecked = checkedItems;\r\n\r\n        for ( const item of this.card.checklists )\r\n        {\r\n            allCheckItems += item.checkItems.length;\r\n            allCheckedItems += item.checkItemsChecked;\r\n        }\r\n\r\n        this.card.checkItems = allCheckItems;\r\n        this.card.checkItemsChecked = allCheckedItems;\r\n\r\n        this.updateCard();\r\n    }\r\n\r\n    /**\r\n     * Remove checklist item\r\n     *\r\n     * @param checkItem\r\n     * @param checklist\r\n     */\r\n    removeChecklistItem(checkItem, checklist): void\r\n    {\r\n        checklist.checkItems.splice(checklist.checkItems.indexOf(checkItem), 1);\r\n\r\n        this.updateCheckedCount(checklist);\r\n\r\n        this.updateCard();\r\n    }\r\n\r\n    /**\r\n     * Add check item\r\n     *\r\n     * @param {NgForm} form\r\n     * @param checkList\r\n     */\r\n    addCheckItem(form: NgForm, checkList): void\r\n    {\r\n        const checkItemVal = form.value.checkItem;\r\n\r\n        if ( !checkItemVal || checkItemVal === '' )\r\n        {\r\n            return;\r\n        }\r\n\r\n        const newCheckItem = {\r\n            name   : checkItemVal,\r\n            checked: false\r\n        };\r\n\r\n        checkList.checkItems.push(newCheckItem);\r\n\r\n        this.updateCheckedCount(checkList);\r\n\r\n        form.setValue({checkItem: ''});\r\n\r\n        this.updateCard();\r\n    }\r\n\r\n    /**\r\n     * Add checklist\r\n     *\r\n     * @param {NgForm} form\r\n     */\r\n    addChecklist(form: NgForm): void\r\n    {\r\n        this.card.checklists.push({\r\n            id               : FuseUtils.generateGUID(),\r\n            name             : form.value.checklistTitle,\r\n            checkItemsChecked: 0,\r\n            checkItems       : []\r\n        });\r\n\r\n        form.setValue({checklistTitle: ''});\r\n        form.resetForm();\r\n        this.checklistMenu.closeMenu();\r\n        this.updateCard();\r\n    }\r\n\r\n    /**\r\n     * On checklist menu open\r\n     */\r\n    onChecklistMenuOpen(): void\r\n    {\r\n        setTimeout(() => {\r\n            this.newCheckListTitleField.nativeElement.focus();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Add new comment\r\n     *\r\n     * @param {NgForm} form\r\n     */\r\n    addNewComment(form: NgForm): void\r\n    {\r\n        const newCommentText = form.value.newComment;\r\n\r\n        const newComment = {\r\n            idMember: '36027j1930450d8bf7b10158',\r\n            message : newCommentText,\r\n            time    : 'now'\r\n        };\r\n\r\n        this.card.comments.unshift(newComment);\r\n\r\n        form.setValue({newComment: ''});\r\n\r\n        this.updateCard();\r\n    }\r\n\r\n    /**\r\n     * Remove card\r\n     */\r\n    removeCard(): void\r\n    {\r\n        this.confirmDialogRef = this._matDialog.open(FuseConfirmDialogComponent, {\r\n            disableClose: false\r\n        });\r\n\r\n        this.confirmDialogRef.componentInstance.confirmMessage = 'Are you sure you want to delete the card?';\r\n\r\n        this.confirmDialogRef.afterClosed().subscribe(result => {\r\n            if ( result )\r\n            {\r\n                this.matDialogRef.close();\r\n                this._scrumboardService.removeCard(this.card.id, this.list.id);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Update card\r\n     */\r\n    updateCard(): void\r\n    {\r\n        this._scrumboardService.updateCard(this.card);\r\n    }\r\n}\r\n","<div class=\"dialog-content-wrapper\">\r\n\r\n    <mat-toolbar *ngIf=\"card\" matDialogTitle class=\"accent m-0\" fxFlex=\"1 0 auto\" fxLayout=\"row\">\r\n\r\n        <div fxFlex fxLayout=\"row\" fxLayoutAlign=\"space-between center\">\r\n\r\n            <div fxFlex fxLayout=\"row\" fxLayoutAlign=\"start center\">\r\n\r\n                <!-- DUE DATE -->\r\n                <div class=\"due-date\" fxFlex=\"0 1 auto\">\r\n\r\n                    <button *ngIf=\"card.due\" mat-icon-button [matMenuTriggerFor]=\"dueDateMenu\">\r\n                        <mat-icon>today</mat-icon>\r\n                    </button>\r\n\r\n                    <mat-menu #dueDateMenu=\"matMenu\" [overlapTrigger]=\"false\">\r\n                        <button mat-menu-item (click)=\"removeDueDate()\">Remove Due Date</button>\r\n                    </mat-menu>\r\n\r\n                    <mat-form-field *ngIf=\"!card.due\">\r\n                        <input matInput [matDatepicker]=\"menuPicker\" [(ngModel)]=\"card.due\">\r\n                        <mat-datepicker-toggle matSuffix [for]=\"menuPicker\"></mat-datepicker-toggle>\r\n                        <mat-datepicker #menuPicker></mat-datepicker>\r\n                    </mat-form-field>\r\n\r\n                </div>\r\n                <!-- / DUE DATE -->\r\n\r\n                <!-- LABELS -->\r\n                <div class=\"labels\" fxFlex=\"0 1 auto\">\r\n\r\n                    <button mat-icon-button [matMenuTriggerFor]=\"labelsMenu\">\r\n                        <mat-icon>label</mat-icon>\r\n                    </button>\r\n\r\n                    <mat-menu #labelsMenu=\"matMenu\" [overlapTrigger]=\"false\" class=\"scrumboard-labels-menu\">\r\n\r\n                        <scrumboard-label-selector [card]=\"card\"\r\n                                                   (cardLabelsChanged)=\"updateCard()\"></scrumboard-label-selector>\r\n\r\n                    </mat-menu>\r\n\r\n                </div>\r\n                <!-- / LABELS -->\r\n\r\n                <!-- MEMBERS -->\r\n                <div class=\"members\" fxFlex=\"0 1 auto\">\r\n\r\n                    <button mat-icon-button class=\"\" [matMenuTriggerFor]=\"membersMenu\">\r\n                        <mat-icon>account_circle</mat-icon>\r\n                    </button>\r\n\r\n                    <mat-menu #membersMenu=\"matMenu\" [overlapTrigger]=\"false\">\r\n                        <div fxFlex fxLayout=\"column\" class=\"scrumboard-members-menu\"\r\n                             (click)=\"$event.stopPropagation()\">\r\n                            <mat-checkbox class=\"member px-16\" [checked]=\"card.idMembers.indexOf(member.id) > -1\"\r\n                                          *ngFor=\"let member of board.members\"\r\n                                          (change)=\"toggleInArray(member.id, card.idMembers);updateCard()\">\r\n                                <div fxLayout=\"row\" fxLayoutAlign=\"start center\">\r\n                                    <img [alt]=\"member.name\" [src]=\" member.avatar\" class=\"avatar\"/>\r\n                                    <p class=\"member-name\">{{ member.name }}</p>\r\n                                </div>\r\n                            </mat-checkbox>\r\n                        </div>\r\n                    </mat-menu>\r\n\r\n                </div>\r\n                <!-- / MEMBERS -->\r\n\r\n                <!-- ATTACHMENT -->\r\n                <button mat-icon-button aria-label=\"Attachment\">\r\n                    <mat-icon>attachment</mat-icon>\r\n                </button>\r\n                <!-- / ATTACHMENT -->\r\n\r\n                <!-- CHECKLIST -->\r\n                <div class=\"due-date \" fxFlex=\"0 1 auto\">\r\n\r\n                    <button mat-icon-button class=\"\" [matMenuTriggerFor]=\"checklistMenu\"\r\n                            #checklistMenuTrigger=\"matMenuTrigger\" (menuOpened)=\"onChecklistMenuOpen()\">\r\n                        <mat-icon>check_box</mat-icon>\r\n                    </button>\r\n\r\n                    <mat-menu #checklistMenu=\"matMenu\" [overlapTrigger]=\"false\">\r\n\r\n                        <form class=\"px-16 py-8\" #newChecklistForm=\"ngForm\" (submit)=\"addChecklist(newChecklistForm)\"\r\n                              (click)=\"$event.stopPropagation()\"\r\n                              fxLayout=\"column\" fxLayoutAlign=\"start end\">\r\n\r\n                            <mat-form-field appearance=\"outline\" (click)=\"$event.stopPropagation()\" fxFlex>\r\n                                <mat-label>Checklist title</mat-label>\r\n                                <input #newCheckListTitleField matInput ngModel #checklistTitle=\"ngModel\"\r\n                                       name=\"checklistTitle\" required>\r\n                            </mat-form-field>\r\n\r\n                            <button mat-raised-button class=\"mat-accent\" aria-label=\"Add Checklist\"\r\n                                    [disabled]=\"!newChecklistForm.valid\">Add Checklist\r\n                            </button>\r\n\r\n                        </form>\r\n\r\n                    </mat-menu>\r\n\r\n                </div>\r\n                <!-- / CHECKLIST -->\r\n\r\n                <!-- SUBSCRIBE -->\r\n                <div class=\"subscribe \" fxFlex=\"0 1 auto\">\r\n\r\n                    <button mat-icon-button [matMenuTriggerFor]=\"subscribeMenu\">\r\n                        <mat-icon *ngIf=\"card.subscribed\">visibility</mat-icon>\r\n                        <mat-icon *ngIf=\"!card.subscribed\">visibility_off</mat-icon>\r\n                    </button>\r\n\r\n                    <mat-menu #subscribeMenu=\"matMenu\" [overlapTrigger]=\"false\">\r\n                        <button *ngIf=\"card.subscribed\" mat-menu-item (click)=\"toggleSubscribe()\">\r\n                            Unsubscribe\r\n                        </button>\r\n                        <button *ngIf=\"!card.subscribed\" mat-menu-item (click)=\"toggleSubscribe()\">\r\n                            Subscribe\r\n                        </button>\r\n                    </mat-menu>\r\n\r\n                </div>\r\n                <!-- / SUBSCRIBE -->\r\n\r\n                <!-- OPTIONS -->\r\n                <div class=\"options \" fxFlex=\"0 1 auto\">\r\n\r\n                    <button mat-icon-button class=\"\" [matMenuTriggerFor]=\"optionsMenu\">\r\n                        <mat-icon>more_horiz</mat-icon>\r\n                    </button>\r\n\r\n                    <mat-menu #optionsMenu=\"matMenu\" [overlapTrigger]=\"false\">\r\n                        <button mat-menu-item (click)=\"removeCard()\">\r\n                            Remove Card\r\n                        </button>\r\n                    </mat-menu>\r\n\r\n                </div>\r\n                <!-- / OPTIONS -->\r\n\r\n            </div>\r\n\r\n            <!-- CLOSE DIALOG BUTTON -->\r\n            <button mat-icon-button (click)=\"matDialogRef.close()\" aria-label=\"Close Dialog\">\r\n                <mat-icon>close</mat-icon>\r\n            </button>\r\n            <!-- / CLOSE DIALOG BUTTON -->\r\n\r\n        </div>\r\n\r\n    </mat-toolbar>\r\n\r\n    <div *ngIf=\"card\" mat-dialog-content class=\"py-24 px-0 m-0\" fusePerfectScrollbar>\r\n\r\n        <!-- BREADCRUMB -->\r\n        <div class=\"card-breadcrumb mt-8 mb-32 px-24\" fxLayout=\"row\" fxLayoutAlign=\"start center\">\r\n            <span>{{board.name}}</span>\r\n            <mat-icon class=\"s-20\">chevron_right</mat-icon>\r\n            <span>{{list.name}}</span>\r\n        </div>\r\n        <!-- / BREADCRUMB -->\r\n\r\n        <div fxLayout=\"row\" fxLayoutAlign=\"start center\">\r\n\r\n            <!-- NAME -->\r\n            <div class=\"card-name px-24\" fxLayout=\"row\" fxLayoutAlign=\"start center\">\r\n                <mat-form-field appearance=\"outline\" class=\"w-100-p\">\r\n                    <mat-label>Title</mat-label>\r\n                    <input matInput [(ngModel)]=\"card.name\" required (change)=\"updateCard()\">\r\n                </mat-form-field>\r\n            </div>\r\n            <!-- / NAME -->\r\n\r\n            <!-- DUE DATE -->\r\n            <div *ngIf=\"card.due\" class=\"due-date px-24 pl-0\" fxLayout=\"row\" fxLayoutAlign=\"start center\">\r\n                <mat-form-field appearance=\"outline\" class=\"w-100-p\">\r\n                    <mat-label>Due Date</mat-label>\r\n                    <input matInput [matDatepicker]=\"picker\" [(ngModel)]=\"card.due\">\r\n                    <mat-datepicker-toggle matSuffix [for]=\"picker\"></mat-datepicker-toggle>\r\n                    <mat-datepicker #picker></mat-datepicker>\r\n                </mat-form-field>\r\n            </div>\r\n            <!-- / DUE DATE -->\r\n\r\n        </div>\r\n\r\n        <!-- DESCRIPTION -->\r\n        <div class=\"description px-24 mb-16\">\r\n            <mat-form-field appearance=\"outline\" class=\"w-100-p\">\r\n                <mat-label>Description</mat-label>\r\n                <textarea matInput [(ngModel)]=\"card.description\" columns=\"1\"\r\n                          mat-maxlength=\"150\" max-rows=\"4\" (change)=\"updateCard()\"></textarea>\r\n            </mat-form-field>\r\n        </div>\r\n        <!-- / DESCRIPTION -->\r\n\r\n        <!-- SECTIONS -->\r\n        <div class=\"sections\">\r\n\r\n            <!-- LABELS & MEMBERS SECTION -->\r\n            <div *ngIf=\"card.idLabels[0] || card.idMembers[0]\" class=\"section\"\r\n                 fxLayout=\"column\" fxLayout.gt-xs=\"row\">\r\n\r\n                <div *ngIf=\"card.idLabels[0]\" fxFlex class=\"labels\">\r\n\r\n                    <div class=\"section-header\" fxLayout=\"row\" fxLayoutAlign=\"start center\">\r\n                        <mat-icon class=\"mr-8\">label</mat-icon>\r\n                        <span class=\"section-title\">Labels</span>\r\n                    </div>\r\n\r\n                    <div class=\"section-content\">\r\n                        <mat-chip-list class=\"label-chips\">\r\n                            <mat-chip class=\"label-chip mb-4\"\r\n                                      *ngFor=\"let labelId of card.idLabels\"\r\n                                      [ngClass]=\"board.labels | getById:labelId:'color'\"\r\n                                      fxLayout=\"row\" fxLayoutAlign=\"start center\">\r\n                                <span>{{board.labels|getById:labelId:'name'}}</span>\r\n                            </mat-chip>\r\n                        </mat-chip-list>\r\n                    </div>\r\n\r\n                </div>\r\n\r\n                <div *ngIf=\"card.idMembers[0]\" fxFlex class=\"members\">\r\n\r\n                    <div class=\"section-header\" fxLayout=\"row\" fxLayoutAlign=\"start center\">\r\n                        <mat-icon class=\"mr-8\">supervisor_account</mat-icon>\r\n                        <span class=\"section-title\">Members</span>\r\n                    </div>\r\n\r\n                    <div class=\"section-content\">\r\n                        <div class=\"member-chips\" fxLayout=\"row\" fxLayoutWrap>\r\n                            <div class=\"member-chip mb-4\" *ngFor=\"let memberId of card.idMembers\"\r\n                                 fxLayout=\"row\" fxLayoutAlign=\"start center\">\r\n                                <img class=\"member-chip-avatar\" [src]=\"board.members | getById:memberId:'avatar'\"\r\n                                     [matTooltip]=\"board.members | getById:memberId:'name'\">\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n\r\n                </div>\r\n\r\n            </div>\r\n            <!-- / LABELS & MEMBERS SECTION -->\r\n\r\n            <!-- ATTACHMENTS SECTION -->\r\n            <div *ngIf=\"card.attachments[0]\" class=\"section\">\r\n\r\n                <div class=\"attachments\">\r\n\r\n                    <div class=\"section-header\" fxLayout=\"row\" fxLayoutAlign=\"start\">\r\n                        <mat-icon class=\"mr-8\">attachment</mat-icon>\r\n                        <span class=\"section-title\">Attachments</span>\r\n                    </div>\r\n\r\n                    <div class=\"section-content\">\r\n\r\n                        <div fxLayout=\"column\" fxLayoutAlign=\"start\" fxLayoutWrap fxLayout.gt-sm=\"row\">\r\n\r\n                            <div class=\"attachment\" fxFlex=\"33\" *ngFor=\"let item of card.attachments\"\r\n                                 [ngSwitch]=\"item.type\">\r\n\r\n                                <div fxLayout=\"column\" fxLayoutAlign=\"start\" *ngSwitchCase=\"'image'\">\r\n\r\n                                    <div class=\"attachment-preview mat-elevation-z1\">\r\n                                        <img [src]=\"item.src\">\r\n                                    </div>\r\n\r\n                                    <div class=\"attachment-content mt-8\" fxLayout=\"row\"\r\n                                         fxLayoutAlign=\"start center\">\r\n\r\n                                        <div fxFlex>\r\n\r\n                                            <div fxLayout=\"row\" fxLayoutAlign=\"start start\">\r\n                                                <span class=\"attachment-name\">{{item.name}}</span>\r\n                                                <mat-icon *ngIf=\"card.idAttachmentCover === item.id\"\r\n                                                          class=\"yellow-700-fg attachment-is-cover\">\r\n                                                    star\r\n                                                </mat-icon>\r\n                                            </div>\r\n\r\n                                            <span class=\"attachment-time\">{{item.time}}</span>\r\n\r\n                                        </div>\r\n\r\n                                        <button mat-icon-button class=\"attachment-actions-button\"\r\n                                                [matMenuTriggerFor]=\"attachmentActionsMenu\">\r\n                                            <mat-icon>more_vert</mat-icon>\r\n                                        </button>\r\n\r\n                                        <mat-menu #attachmentActionsMenu=\"matMenu\">\r\n                                            <button mat-menu-item (click)=\"toggleCoverImage(item.id)\">\r\n                                                <span *ngIf=\"card.idAttachmentCover !== item.id\">Make Cover</span>\r\n                                                <span *ngIf=\"card.idAttachmentCover === item.id\">Remove Cover</span>\r\n                                            </button>\r\n                                            <button mat-menu-item (click)=\"removeAttachment(item)\">\r\n                                                Remove Attachment\r\n                                            </button>\r\n                                        </mat-menu>\r\n\r\n                                    </div>\r\n\r\n                                </div>\r\n\r\n                                <div *ngSwitchCase=\"'link'\" fxLayout=\"row\">\r\n                                    <div class=\"attachment-preview mat-elevation-z2\" fxLayout=\"column\"\r\n                                         fxLayoutAlign=\"center center\">\r\n                                        <span>LINK</span>\r\n                                    </div>\r\n                                    <div class=\"attachment-content\" fxLayout=\"column\">\r\n                                        <span class=\"attachment-url\">{{item.url}}</span>\r\n                                        <span class=\"attachment-time\">{{item.time}}</span>\r\n                                    </div>\r\n                                </div>\r\n\r\n                            </div>\r\n\r\n                        </div>\r\n\r\n                        <button mat-stroked-button class=\"add-attachment-button\" aria-label=\"add attachment\">\r\n                            Add an attachment\r\n                        </button>\r\n\r\n                    </div>\r\n\r\n                </div>\r\n\r\n            </div>\r\n            <!-- / ATTACHMENTS SECTION -->\r\n\r\n            <!-- CHECKLISTS SECTION -->\r\n            <div class=\"section\" *ngFor=\"let checklist of card.checklists\">\r\n\r\n                <div class=\"checklist\">\r\n\r\n                    <div class=\"section-header\" fxLayout=\"row\" fxLayoutAlign=\"start center\">\r\n\r\n                        <mat-icon class=\"mr-8\">check_box</mat-icon>\r\n                        <span fxFlex class=\"section-title\">{{checklist.name}}</span>\r\n\r\n                        <div>\r\n\r\n                            <button mat-icon-button class=\"checklist-actions-button\"\r\n                                    [matMenuTriggerFor]=\"checklistActionsMenu\">\r\n                                <mat-icon class=\"s-20\">more_vert</mat-icon>\r\n                            </button>\r\n\r\n                            <mat-menu #checklistActionsMenu=\"matMenu\">\r\n                                <button mat-menu-item (click)=\"removeChecklist(checklist)\">\r\n                                    <mat-icon>delete</mat-icon>\r\n                                    <span>Remove Checklist</span>\r\n                                </button>\r\n                            </mat-menu>\r\n\r\n                        </div>\r\n\r\n                    </div>\r\n\r\n                    <div class=\"section-content\">\r\n\r\n                        <div class=\"checklist-progress\" fxLayout=\"row\" fxLayoutAlign=\"start center\">\r\n\r\n                            <span class=\"checklist-progress-value\">\r\n                                {{checklist.checkItemsChecked}} / {{checklist.checkItems.length}}\r\n                            </span>\r\n\r\n                            <mat-progress-bar color=\"accent\" class=\"checklist-progressbar\" mode=\"determinate\"\r\n                                              value=\"{{100 * checklist.checkItemsChecked / checklist.checkItems.length}}\">\r\n                            </mat-progress-bar>\r\n\r\n                        </div>\r\n\r\n                        <div class=\"check-items\">\r\n\r\n                            <div class=\"check-item\" *ngFor=\"let checkItem of checklist.checkItems\" fxLayout=\"row\"\r\n                                 fxLayoutAlign=\"space-between center\">\r\n\r\n                                <div fxFlex fxLayout=\"row\" fxLayoutAlign=\"start center\">\r\n\r\n                                    <mat-form-field appearance=\"outline\" fxFlex>\r\n                                        <input matInput [(ngModel)]=\"checkItem.name\">\r\n                                        <mat-checkbox matPrefix [(ngModel)]=\"checkItem.checked\"\r\n                                                      (change)=\"updateCheckedCount(checklist)\"\r\n                                                      aria-label=\"{{checkItem.name}}\">\r\n                                        </mat-checkbox>\r\n                                        <button mat-icon-button matSuffix class=\"checklist-actions-button\"\r\n                                                (click)=\"removeChecklistItem(checkItem, checklist)\">\r\n                                            <mat-icon class=\"secondary-text\">delete</mat-icon>\r\n                                        </button>\r\n                                    </mat-form-field>\r\n\r\n                                </div>\r\n\r\n                            </div>\r\n\r\n                        </div>\r\n\r\n                        <form #newCheckItemForm=\"ngForm\" (submit)=\"addCheckItem(newCheckItemForm,checklist)\"\r\n                              name=\"newCheckItemForm\" class=\"new-check-item-form\"\r\n                              fxLayout=\"row\" fxLayoutAlign=\"start center\">\r\n\r\n                            <div fxLayout=\"row\" fxLayoutAlign=\"start center\" fxFlex>\r\n\r\n                                <mat-form-field appearance=\"outline\" class=\"no-errors-spacer mr-16\" fxFlex>\r\n                                    <input matInput ngModel #checkItem=\"ngModel\" name=\"checkItem\" autocomplete=\"off\"\r\n                                           placeholder=\"New checklist item\">\r\n                                </mat-form-field>\r\n\r\n                            </div>\r\n\r\n                            <button mat-mini-fab color=\"accent\"\r\n                                    [disabled]=\"!newCheckItemForm.valid || newCheckItemForm.pristine\"\r\n                                    aria-label=\"Add\">\r\n                                <mat-icon>add</mat-icon>\r\n                            </button>\r\n                        </form>\r\n\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <!-- / CHECKLISTS SECTION -->\r\n\r\n            <!-- COMMENTS SECTION -->\r\n            <div class=\"section\">\r\n\r\n                <div class=\"comments\">\r\n\r\n                    <div class=\"section-header\" fxLayout=\"row\" fxLayoutAlign=\"start center\">\r\n                        <mat-icon class=\"mr-8\">comment</mat-icon>\r\n                        <span class=\"section-title\">Comments</span>\r\n                    </div>\r\n\r\n                    <div class=\"section-content\">\r\n\r\n                        <form name=\"cardCommentForm\"\r\n                              #newCommentForm=\"ngForm\" (submit)=\"addNewComment(newCommentForm)\"\r\n                              class=\"comment new-comment\" fxLayout=\"column\" fxLayoutAlign=\"start\" no-validate>\r\n\r\n                            <div fxLayout=\"row\" fxLayoutAlign=\"center center\">\r\n\r\n                                <img class=\"comment-member-avatar\" src=\"assets/images/avatars/profile.jpg\">\r\n\r\n                                <mat-form-field class=\"mr-12\" appearance=\"outline\" fxFlex>\r\n                                    <mat-label>Comment</mat-label>\r\n                                    <input matInput name=\"newComment\" ngModel #newComment=\"ngModel\" required>\r\n                                </mat-form-field>\r\n\r\n                                <button mat-mini-fab class=\"mat-accent\"\r\n                                        [disabled]=\"!newCommentForm.valid || newCommentForm.pristine\"\r\n                                        aria-label=\"Add\">\r\n                                    <mat-icon>add</mat-icon>\r\n                                </button>\r\n\r\n                            </div>\r\n\r\n                        </form>\r\n\r\n                        <div class=\"comment\" fxLayout=\"row\" fxLayoutAlign=\"start center\"\r\n                             *ngFor=\"let comment of card.comments\">\r\n\r\n                            <img class=\"comment-member-avatar\"\r\n                                 [src]=\"board.members | getById: comment.idMember:'avatar'\">\r\n\r\n                            <div fxLayout=\"column\">\r\n                                <div class=\"comment-member-name\">\r\n                                    {{board.members | getById: comment.idMember:'name'}}\r\n                                </div>\r\n                                <div class=\"comment-bubble\">{{comment.message}}</div>\r\n                                <div class=\"comment-time secondary-text\">{{comment.time}}</div>\r\n                            </div>\r\n                        </div>\r\n\r\n                    </div>\r\n\r\n                </div>\r\n\r\n            </div>\r\n            <!-- / COMMENTS SECTION -->\r\n\r\n            <!-- ACTIVITIES SECTION -->\r\n            <div *ngIf=\"card.activities[0]\" class=\"section\">\r\n\r\n                <div class=\"activities\">\r\n\r\n                    <div class=\"section-header\" fxLayout=\"row\" fxLayoutAlign=\"start center\">\r\n                        <mat-icon class=\"mr-8\">list</mat-icon>\r\n                        <span class=\"section-title\">Activity</span>\r\n                    </div>\r\n\r\n                    <div class=\"section-content\">\r\n\r\n                        <div class=\"activity\" *ngFor=\"let activity of card.activities\" fxLayout=\"row\"\r\n                             fxLayoutAlign=\"start center\">\r\n\r\n                            <img class=\"activity-member-avatar\"\r\n                                 [src]=\"board.members | getById:activity.idMember:'avatar'\">\r\n\r\n                            <div>\r\n\r\n                                <div fxLayout=\"row\" fxLayoutAlign=\"start center\">\r\n\r\n                                    <div class=\"activity-member-name\">\r\n                                        {{board.members | getById:activity.idMember:'name'}}\r\n                                    </div>\r\n                                    <div class=\"activity-message\">{{activity.message}}</div>\r\n\r\n                                </div>\r\n\r\n                                <div class=\"activity-time mt-4 secondary-text\">{{activity.time}}</div>\r\n\r\n                            </div>\r\n\r\n                        </div>\r\n\r\n                    </div>\r\n\r\n                </div>\r\n\r\n            </div>\r\n            <!-- / ACTIVITIES SECTION -->\r\n\r\n        </div>\r\n        <!-- / SECTIONS -->\r\n\r\n    </div>\r\n\r\n</div>\r\n","import { Component, EventEmitter, Input, OnDestroy, OnInit, Output, ViewEncapsulation } from '@angular/core';\r\nimport { Subject } from 'rxjs';\r\nimport { takeUntil } from 'rxjs/operators';\r\n\r\nimport { fuseAnimations } from '@fuse/animations';\r\nimport { FuseUtils } from '@fuse/utils';\r\n\r\nimport { ScrumboardService } from 'app/main/apps/scrumboard/scrumboard.service';\r\n\r\n@Component({\r\n    selector     : 'scrumboard-label-selector',\r\n    templateUrl  : './label-selector.component.html',\r\n    styleUrls    : ['./label-selector.component.scss'],\r\n    encapsulation: ViewEncapsulation.None,\r\n    animations   : fuseAnimations\r\n})\r\n\r\nexport class ScrumboardLabelSelectorComponent implements OnInit, OnDestroy\r\n{\r\n    @Input('card')\r\n    card: any;\r\n\r\n    @Output()\r\n    cardLabelsChanged: EventEmitter<any>;\r\n\r\n    board: any;\r\n    labelsMenuView: string;\r\n    selectedLabel: any;\r\n    newLabel: any;\r\n    toggleInArray: any;\r\n\r\n    // Private\r\n    private _unsubscribeAll: Subject<any>;\r\n\r\n    /**\r\n     * Constructor\r\n     *\r\n     * @param {ScrumboardService} _scrumboardService\r\n     */\r\n    constructor(\r\n        private _scrumboardService: ScrumboardService\r\n    )\r\n    {\r\n        // Set the defaults\r\n        this.cardLabelsChanged = new EventEmitter();\r\n        this.labelsMenuView = 'labels';\r\n        this.newLabel = {\r\n            id   : '',\r\n            name : '',\r\n            color: 'blue-400'\r\n        };\r\n        this.toggleInArray = FuseUtils.toggleInArray;\r\n\r\n        // Set the private defaults\r\n        this._unsubscribeAll = new Subject();\r\n    }\r\n\r\n    // -----------------------------------------------------------------------------------------------------\r\n    // @ Lifecycle hooks\r\n    // -----------------------------------------------------------------------------------------------------\r\n\r\n    /**\r\n     * On init\r\n     */\r\n    ngOnInit(): void\r\n    {\r\n        this._scrumboardService.onBoardChanged\r\n            .pipe(takeUntil(this._unsubscribeAll))\r\n            .subscribe(board => {\r\n                this.board = board;\r\n            });\r\n    }\r\n\r\n    /**\r\n     * On destroy\r\n     */\r\n    ngOnDestroy(): void\r\n    {\r\n        // Unsubscribe from all subscriptions\r\n        this._unsubscribeAll.next();\r\n        this._unsubscribeAll.complete();\r\n    }\r\n\r\n    // -----------------------------------------------------------------------------------------------------\r\n    // @ Public methods\r\n    // -----------------------------------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Card labels changed\r\n     */\r\n    onCardLabelsChanged(): void\r\n    {\r\n        this.cardLabelsChanged.next();\r\n    }\r\n\r\n    /**\r\n     * On label change\r\n     */\r\n    onLabelChange(): void\r\n    {\r\n        this._scrumboardService.updateBoard();\r\n    }\r\n\r\n    /**\r\n     * Add new label\r\n     */\r\n    addNewLabel(): void\r\n    {\r\n        this.newLabel.id = FuseUtils.generateGUID();\r\n        this.board.labels.push(Object.assign({}, this.newLabel));\r\n        this.newLabel.name = '';\r\n        this.labelsMenuView = 'labels';\r\n    }\r\n}\r\n","<div [ngSwitch]=\"labelsMenuView\" class=\"views\" (click)=\"$event.stopPropagation()\">\r\n\r\n    <div class=\"view\" *ngSwitchCase=\"'labels'\" fxFlex fxLayout=\"column\">\r\n\r\n        <div class=\"header\" fxLayout=\"row\" fxLayoutAlign=\"space-between center\">\r\n            <div>Labels</div>\r\n            <button mat-button (click)=\"labelsMenuView ='add'\">\r\n                <mat-icon class=\"s-16\">add</mat-icon>\r\n                <span>Add</span>\r\n            </button>\r\n        </div>\r\n\r\n        <div fxFlex fxLayout=\"column\" fusePerfectScrollbar>\r\n\r\n            <div class=\"label\" *ngFor=\"let label of board.labels\" fxFlex=\"0 0 auto\" fxLayout=\"row\"\r\n                 fxLayoutAlign=\"space-between center\">\r\n\r\n                <div class=\"label-color\" [ngClass]=\"label.color\"></div>\r\n\r\n                <mat-checkbox fxFlex fxLayout=\"row\" fxLayoutAlign=\"start center\"\r\n                              [checked]=\"card.idLabels.indexOf(label.id) > -1\"\r\n                              (change)=\"toggleInArray(label.id, card.idLabels);onCardLabelsChanged()\">\r\n                    {{label.name}}\r\n                </mat-checkbox>\r\n\r\n                <button mat-icon-button>\r\n                    <mat-icon class=\"s-16\" (click)=\"labelsMenuView ='edit';selectedLabel = label\">mode_edit</mat-icon>\r\n                </button>\r\n\r\n            </div>\r\n\r\n        </div>\r\n\r\n    </div>\r\n\r\n    <div class=\"view edit\" *ngSwitchCase=\"'edit'\" fxFlex fxLayout=\"column\">\r\n\r\n        <div class=\"header\" fxLayout=\"row\" fxLayoutAlign=\"start center\">\r\n            <button mat-icon-button (click)=\"labelsMenuView ='labels'\">\r\n                <mat-icon class=\"s-16\">arrow_back</mat-icon>\r\n            </button>\r\n            <div>Edit Label</div>\r\n        </div>\r\n\r\n        <div class=\"content\" fxLayout=\"row\" fxLayoutAlign=\"start center\">\r\n            <mat-form-field>\r\n                <input matInput placeholder=\"Name\" [(ngModel)]=\"selectedLabel.name\" (change)=\"onLabelChange()\">\r\n            </mat-form-field>\r\n\r\n            <fuse-material-color-picker [(ngModel)]=\"selectedLabel.color\" class=\"ml-8\"\r\n                                        (colorChanged)=\"$event.preventDefault;onLabelChange()\"></fuse-material-color-picker>\r\n        </div>\r\n\r\n    </div>\r\n\r\n    <div class=\"view add\" *ngSwitchCase=\"'add'\" fxFlex fxLayout=\"column\">\r\n\r\n        <div class=\"header\" fxLayout=\"row\" fxLayoutAlign=\"start center\">\r\n            <button mat-icon-button (click)=\"labelsMenuView ='labels'\">\r\n                <mat-icon class=\"s-16\">arrow_back</mat-icon>\r\n            </button>\r\n            <div>Add Label</div>\r\n        </div>\r\n\r\n        <form (submit)=\"addNewLabel()\" #newLabelForm=\"ngForm\" fxFlex fxLayout=\"column\" fxLayoutAlign=\"start end\">\r\n\r\n            <div fxFlex=\"0 1 auto\" fxLayout=\"row\" fxLayoutAlign=\"space-between center\">\r\n                <mat-form-field fxFlex>\r\n                    <input matInput placeholder=\"Name\" [(ngModel)]=\"newLabel.name\" name=\"labelName\" required>\r\n                </mat-form-field>\r\n\r\n                <fuse-material-color-picker class=\"ml-8\" [(ngModel)]=\"newLabel.color\"\r\n                                            name=\"labelColor\"></fuse-material-color-picker>\r\n            </div>\r\n\r\n            <button mat-raised-button class=\"mat-accent mt-16\" [disabled]=\"!newLabelForm.valid\">ADD NEW LABEL</button>\r\n\r\n        </form>\r\n\r\n    </div>\r\n\r\n</div>\r\n","import { Component, EventEmitter, Input, Output, ViewChild, ViewEncapsulation } from '@angular/core';\r\nimport { FormBuilder, FormGroup } from '@angular/forms';\r\n\r\n@Component({\r\n    selector     : 'scrumboard-edit-board-name',\r\n    templateUrl  : './edit-board-name.component.html',\r\n    styleUrls    : ['./edit-board-name.component.scss'],\r\n    encapsulation: ViewEncapsulation.None\r\n})\r\nexport class ScrumboardEditBoardNameComponent\r\n{\r\n    formActive: boolean;\r\n    form: FormGroup;\r\n\r\n    @Input()\r\n    board;\r\n\r\n    @Output()\r\n    boardNameChanged: EventEmitter<any>;\r\n\r\n    @ViewChild('nameInput')\r\n    nameInputField;\r\n\r\n    constructor(\r\n        private formBuilder: FormBuilder\r\n    )\r\n    {\r\n        // Set the defaults\r\n        this.formActive = false;\r\n        this.boardNameChanged = new EventEmitter();\r\n    }\r\n\r\n    // -----------------------------------------------------------------------------------------------------\r\n    // @ Public methods\r\n    // -----------------------------------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Open form\r\n     */\r\n    openForm(): void\r\n    {\r\n        this.form = this.formBuilder.group({\r\n            name: [this.board.name]\r\n        });\r\n        this.formActive = true;\r\n        this.focusNameField();\r\n    }\r\n\r\n    /**\r\n     * Close form\r\n     */\r\n    closeForm(): void\r\n    {\r\n        this.formActive = false;\r\n    }\r\n\r\n    /**\r\n     * Focus to the name field\r\n     */\r\n    focusNameField(): void\r\n    {\r\n        setTimeout(() => {\r\n            this.nameInputField.nativeElement.focus();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * On form submit\r\n     */\r\n    onFormSubmit(): void\r\n    {\r\n        if ( this.form.valid )\r\n        {\r\n            this.board.name = this.form.getRawValue().name;\r\n            this.board.uri = encodeURIComponent(this.board.name).replace(/%20/g, '-').toLowerCase();\r\n\r\n            this.boardNameChanged.next(this.board.name);\r\n            this.formActive = false;\r\n        }\r\n    }\r\n}\r\n","<div *ngIf=\"!formActive\" class=\"board-name\" fxFlex=\"1 0 auto\" fxLayout=\"row\" fxLayoutAlign=\"start center\">\r\n    <span>{{board.name}}</span>\r\n    <button mat-icon-button (click)=\"openForm()\">\r\n        <mat-icon class=\"s-16\">edit_mode</mat-icon>\r\n    </button>\r\n</div>\r\n\r\n\r\n<form [formGroup]=\"form\" (ngSubmit)=\"onFormSubmit()\"\r\n      class=\"board-name-form\" fxLayout=\"row\" fxFlex=\"1 0 auto\" *ngIf=\"formActive\">\r\n\r\n    <input formControlName=\"name\" #nameInput fxFlex=\"1 0 auto\" placeholder=\"Write a board name\">\r\n\r\n    <button mat-icon-button fxFlex=\"0 1 auto\">\r\n        <mat-icon>check</mat-icon>\r\n    </button>\r\n    <button mat-icon-button fxFlex=\"0 1 auto\" (click)=\"closeForm()\" type=\"button\">\r\n        <mat-icon>close</mat-icon>\r\n    </button>\r\n</form>\r\n","import { Component, EventEmitter, Output, ViewChild, ViewEncapsulation } from '@angular/core';\r\nimport { FormBuilder, FormGroup } from '@angular/forms';\r\n\r\n@Component({\r\n    selector     : 'scrumboard-board-add-card',\r\n    templateUrl  : './add-card.component.html',\r\n    styleUrls    : ['./add-card.component.scss'],\r\n    encapsulation: ViewEncapsulation.None\r\n})\r\nexport class ScrumboardBoardAddCardComponent\r\n{\r\n    formActive: boolean;\r\n    form: FormGroup;\r\n\r\n    @Output()\r\n    cardAdded: EventEmitter<any>;\r\n\r\n    @ViewChild('nameInput')\r\n    nameInputField;\r\n\r\n    /**\r\n     * Constructor\r\n     *\r\n     * @param {FormBuilder} _formBuilder\r\n     */\r\n    constructor(\r\n        private _formBuilder: FormBuilder\r\n    )\r\n    {\r\n        // Set the defaults\r\n        this.formActive = false;\r\n        this.cardAdded = new EventEmitter();\r\n    }\r\n\r\n    // -----------------------------------------------------------------------------------------------------\r\n    // @ Public methods\r\n    // -----------------------------------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Open the form\r\n     */\r\n    openForm(): void\r\n    {\r\n        this.form = this._formBuilder.group({\r\n            name: ''\r\n        });\r\n        this.formActive = true;\r\n        this.focusNameField();\r\n    }\r\n\r\n    /**\r\n     * Close the form\r\n     */\r\n    closeForm(): void\r\n    {\r\n        this.formActive = false;\r\n    }\r\n\r\n    /**\r\n     * Focus to the name field\r\n     */\r\n    focusNameField(): void\r\n    {\r\n        setTimeout(() => {\r\n            this.nameInputField.nativeElement.focus();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * On form submit\r\n     */\r\n    onFormSubmit(): void\r\n    {\r\n        if ( this.form.valid )\r\n        {\r\n            const cardName = this.form.getRawValue().name;\r\n            this.cardAdded.next(cardName);\r\n            this.formActive = false;\r\n        }\r\n    }\r\n}\r\n\r\n","<div *ngIf=\"!formActive\" class=\"add-card-button\"\r\n     (click)=\"openForm()\"\r\n     fxLayout=\"row\" fxLayoutAlign=\"start center\">\r\n    <mat-icon class=\"s-20\">add</mat-icon>\r\n    <div>Add a card</div>\r\n</div>\r\n\r\n<div *ngIf=\"formActive\" class=\"add-card-form-wrapper\">\r\n\r\n    <form [formGroup]=\"form\" (submit)=\"onFormSubmit()\" class=\"add-card-form\" fxLayout=\"column\">\r\n\r\n        <mat-form-field fxFlex floatLabel=\"never\">\r\n            <input #nameInput matInput formControlName=\"name\" placeholder=\"Card title\" autocomplete=\"off\" required>\r\n        </mat-form-field>\r\n\r\n        <div class=\"pl-8\" fxLayout=\"row\" fxLayoutAlign=\"space-between center\">\r\n\r\n            <button mat-raised-button class=\"add-button mat-accent\" aria-label=\"add\"\r\n                    [disabled]=\"form.invalid\">\r\n                <span>Add</span>\r\n            </button>\r\n\r\n            <button mat-icon-button (click)=\"closeForm()\" class=\"cancel-button\" aria-label=\"cancel\">\r\n                <mat-icon>close</mat-icon>\r\n            </button>\r\n        </div>\r\n    </form>\r\n</div>\r\n","import { Component, Input, OnInit, ViewEncapsulation } from '@angular/core';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport * as moment from 'moment';\r\n\r\n@Component({\r\n    selector     : 'scrumboard-board-card',\r\n    templateUrl  : './card.component.html',\r\n    styleUrls    : ['./card.component.scss'],\r\n    encapsulation: ViewEncapsulation.None\r\n})\r\nexport class ScrumboardBoardCardComponent implements OnInit\r\n{\r\n    @Input()\r\n    cardId;\r\n\r\n    card: any;\r\n    board: any;\r\n\r\n    /**\r\n     * Constructor\r\n     *\r\n     * @param {ActivatedRoute} _activatedRoute\r\n     */\r\n    constructor(\r\n        private _activatedRoute: ActivatedRoute\r\n    )\r\n    {\r\n    }\r\n\r\n    // -----------------------------------------------------------------------------------------------------\r\n    // @ Lifecycle hooks\r\n    // -----------------------------------------------------------------------------------------------------\r\n\r\n    /**\r\n     * On init\r\n     */\r\n    ngOnInit(): void\r\n    {\r\n        this.board = this._activatedRoute.snapshot.data.board;\r\n        this.card = this.board.cards.filter((card) => {\r\n            return this.cardId === card.id;\r\n        })[0];\r\n    }\r\n\r\n    // -----------------------------------------------------------------------------------------------------\r\n    // @ Public methods\r\n    // -----------------------------------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Is the card overdue?\r\n     *\r\n     * @param cardDate\r\n     * @returns {boolean}\r\n     */\r\n    isOverdue(cardDate): boolean\r\n    {\r\n        return moment() > moment(new Date(cardDate));\r\n    }\r\n}\r\n","<!-- CARD COVER -->\r\n<div *ngIf=\"board.settings.cardCoverImages && card.idAttachmentCover\"\r\n     class=\"list-card-cover\">\r\n    <img [src]=\"card.attachments | getById:card.idAttachmentCover:'src'\">\r\n</div>\r\n<!-- / CARD COVER -->\r\n\r\n<!-- CARD DETAILS -->\r\n<div class=\"list-card-details\">\r\n\r\n    <!-- CARD SORT HANDLE -->\r\n    <div class=\"list-card-sort-handle\">\r\n        <mat-icon mat-font-icon=\"icon-cursor-move\" class=\"icon s16\"></mat-icon>\r\n    </div>\r\n    <!-- /CARD SORT HANDLE -->\r\n\r\n    <!-- CARD LABELS -->\r\n    <div *ngIf=\"card.idLabels.length > 0\" class=\"list-card-labels\" fxLayout=\"row wrap\">\r\n\r\n        <span class=\"list-card-label\"\r\n              [ngClass]=\"board.labels | getById:labelId:'color'\"\r\n              *ngFor=\"let labelId of card.idLabels\"\r\n              [matTooltip]=\"board.labels | getById:labelId:'name'\">\r\n        </span>\r\n\r\n    </div>\r\n    <!-- / CARD LABELS -->\r\n\r\n    <!-- CARD NAME -->\r\n    <div class=\"list-card-name\">{{card.name}}</div>\r\n    <!-- / CARD NAME -->\r\n\r\n    <div *ngIf=\"card.due || card.checkItems\"\r\n         class=\"list-card-badges\" fxLayout=\"row\" fxLayoutAlign=\"start center\">\r\n\r\n        <!-- CARD DUE -->\r\n        <span class=\"badge due-date\"\r\n              [ngClass]=\"{'overdue': isOverdue(card.due)}\"\r\n              *ngIf=\"card.due\" fxLayout=\"row\" fxLayoutAlign=\"start center\">\r\n            <mat-icon class=\"s-16\">access_time</mat-icon>\r\n            <span>{{card.due | date:'mediumDate'}}</span>\r\n\r\n        </span>\r\n        <!-- / CARD DUE -->\r\n\r\n        <!-- CARD CHECK ITEMS STATUS -->\r\n        <span *ngIf=\"card.checkItems\"\r\n              class=\"badge check-items\"\r\n              [ngClass]=\"{'completed': card.checkItemsChecked === card.checkItems}\"\r\n              fxLayout=\"row\" fxLayoutAlign=\"start center\">\r\n            <mat-icon class=\"s-16\">check_circle</mat-icon>\r\n            <span>{{card.checkItemsChecked}}</span>\r\n            <span>/</span>\r\n            <span>{{card.checkItems}}</span>\r\n        </span>\r\n        <!-- / CARD CHECK ITEMS STATUS -->\r\n\r\n    </div>\r\n\r\n    <!-- CARD MEMBERS -->\r\n    <div *ngIf=\"card.idMembers.length > 0\"\r\n         class=\"list-card-members\"\r\n         fxLayout=\"row\">\r\n\r\n        <div class=\"list-card-member\"\r\n             *ngFor=\"let memberId of card.idMembers\">\r\n\r\n            <img class=\"list-card-member-avatar\"\r\n                 [src]=\"board.members | getById:memberId:'avatar'\"\r\n                 [matTooltip]=\"board.members | getById:memberId:'name'\">\r\n        </div>\r\n\r\n    </div>\r\n    <!-- / CARD MEMBERS -->\r\n\r\n</div>\r\n<!-- / CARD DETAILS -->\r\n\r\n<!-- CARD FOOTER -->\r\n<div class=\"list-card-footer\" fxLayout=\"row\" fxLayoutAlign=\"space-between center\">\r\n\r\n    <div fxLayout=\"row\" fxLayoutAlign=\"start center\">\r\n\r\n        <!-- CARD SUBSCRIBE -->\r\n        <span *ngIf=\"card.subscribed\" class=\"list-card-footer-item\"\r\n              fxLayout=\"row\" fxLayoutAlign=\"start center\">\r\n            <mat-icon class=\"s-18\">remove_red_eye</mat-icon>\r\n        </span>\r\n        <!-- / CARD SUBSCRIBE -->\r\n\r\n        <!-- CARD DETAILS -->\r\n        <span *ngIf=\"card.description !== ''\"\r\n              class=\"list-card-footer-item\" fxLayout=\"row\" fxLayoutAlign=\"start center\">\r\n            <mat-icon class=\"s-18\">description</mat-icon>\r\n        </span>\r\n        <!-- / CARD DETAILS -->\r\n\r\n    </div>\r\n\r\n    <div fxLayout=\"row\" fxLayoutAlign=\"end center\">\r\n\r\n        <!-- CARD ATTACHMENT -->\r\n        <span *ngIf=\"card.attachments\"\r\n              class=\"list-card-footer-item\"\r\n              fxLayout=\"row\" fxLayoutAlign=\"start center\">\r\n            <mat-icon class=\"s-18\">attachment</mat-icon>\r\n            <span class=\"value\">{{card.attachments.length}}</span>\r\n        </span>\r\n        <!-- / CARD ATTACHMENT -->\r\n\r\n        <!-- CARD COMMENTS -->\r\n        <span *ngIf=\"card.comments\"\r\n              class=\"list-card-footer-item\"\r\n              fxLayout=\"row\" fxLayoutAlign=\"start center\">\r\n            <mat-icon class=\"s-18\">comment</mat-icon>\r\n            <span class=\"value\">{{card.comments.length}}</span>\r\n        </span>\r\n        <!-- / CARD COMMENTS -->\r\n\r\n    </div>\r\n</div>\r\n<!-- CARD FOOTER -->\r\n","import { Component, EventEmitter, Input, Output, ViewChild, ViewEncapsulation } from '@angular/core';\r\nimport { FormBuilder, FormGroup } from '@angular/forms';\r\n\r\n@Component({\r\n    selector     : 'scrumboard-board-edit-list-name',\r\n    templateUrl  : './edit-list-name.component.html',\r\n    styleUrls    : ['./edit-list-name.component.scss'],\r\n    encapsulation: ViewEncapsulation.None\r\n})\r\nexport class ScrumboardBoardEditListNameComponent\r\n{\r\n    formActive: boolean;\r\n    form: FormGroup;\r\n\r\n    @Input()\r\n    list;\r\n\r\n    @Output()\r\n    listNameChanged: EventEmitter<any>;\r\n\r\n    @ViewChild('nameInput')\r\n    nameInputField;\r\n\r\n    /**\r\n     * Constructor\r\n     *\r\n     * @param {FormBuilder} _formBuilder\r\n     */\r\n    constructor(\r\n        private _formBuilder: FormBuilder\r\n    )\r\n    {\r\n        // Set the defaults\r\n        this.formActive = false;\r\n        this.listNameChanged = new EventEmitter();\r\n    }\r\n\r\n    // -----------------------------------------------------------------------------------------------------\r\n    // @ Public methods\r\n    // -----------------------------------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Open the form\r\n     */\r\n    openForm(): void\r\n    {\r\n        this.form = this._formBuilder.group({\r\n            name: [this.list.name]\r\n        });\r\n        this.formActive = true;\r\n        this.focusNameField();\r\n    }\r\n\r\n    /**\r\n     * Close the form\r\n     */\r\n    closeForm(): void\r\n    {\r\n        this.formActive = false;\r\n    }\r\n\r\n    /**\r\n     * Focus to the name field\r\n     */\r\n    focusNameField(): void\r\n    {\r\n        setTimeout(() => {\r\n            this.nameInputField.nativeElement.focus();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * On form submit\r\n     */\r\n    onFormSubmit(): void\r\n    {\r\n        if ( this.form.valid )\r\n        {\r\n            this.list.name = this.form.getRawValue().name;\r\n            this.listNameChanged.next(this.list.name);\r\n            this.formActive = false;\r\n        }\r\n    }\r\n}\r\n","<div fxFlex=\"1 0 auto\" *ngIf=\"!formActive\" class=\"list-header-name\" (click)=\"openForm()\">\r\n    {{list.name}}\r\n</div>\r\n\r\n<form [formGroup]=\"form\" (ngSubmit)=\"onFormSubmit()\"\r\n      class=\"list-header-name-form\" fxLayout=\"row\" fxFlex=\"1 0 auto\"\r\n      *ngIf=\"formActive\">\r\n\r\n    <input formControlName=\"name\" #nameInput fxFlex placeholder=\"Write a list Name\">\r\n\r\n    <button mat-icon-button fxFlex=\"0 1 auto\">\r\n        <mat-icon>check</mat-icon>\r\n    </button>\r\n    <button mat-icon-button fxFlex=\"0 1 auto\" (click)=\"closeForm()\" type=\"button\">\r\n        <mat-icon>close</mat-icon>\r\n    </button>\r\n</form>\r\n","import { Component, Input, OnDestroy, OnInit, ViewChild, ViewEncapsulation } from '@angular/core';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { MatDialog, MatDialogRef } from '@angular/material/dialog';\r\nimport { Subject } from 'rxjs';\r\nimport { takeUntil } from 'rxjs/operators';\r\n\r\nimport { FuseConfirmDialogComponent } from '@fuse/components/confirm-dialog/confirm-dialog.component';\r\nimport { FusePerfectScrollbarDirective } from '@fuse/directives/fuse-perfect-scrollbar/fuse-perfect-scrollbar.directive';\r\n\r\nimport { ScrumboardService } from 'app/main/apps/scrumboard/scrumboard.service';\r\nimport { Card } from 'app/main/apps/scrumboard/card.model';\r\nimport { ScrumboardCardDialogComponent } from 'app/main/apps/scrumboard/board/dialogs/card/card.component';\r\n\r\n@Component({\r\n    selector     : 'scrumboard-board-list',\r\n    templateUrl  : './list.component.html',\r\n    styleUrls    : ['./list.component.scss'],\r\n    encapsulation: ViewEncapsulation.None\r\n})\r\nexport class ScrumboardBoardListComponent implements OnInit, OnDestroy\r\n{\r\n    board: any;\r\n    dialogRef: any;\r\n\r\n    @Input()\r\n    list;\r\n\r\n    @ViewChild(FusePerfectScrollbarDirective)\r\n    listScroll: FusePerfectScrollbarDirective;\r\n\r\n    confirmDialogRef: MatDialogRef<FuseConfirmDialogComponent>;\r\n\r\n    // Private\r\n    private _unsubscribeAll: Subject<any>;\r\n\r\n    /**\r\n     * Constructor\r\n     *\r\n     * @param {ActivatedRoute} _activatedRoute\r\n     * @param {ScrumboardService} _scrumboardService\r\n     * @param {MatDialog} _matDialog\r\n     */\r\n    constructor(\r\n        private _activatedRoute: ActivatedRoute,\r\n        private _scrumboardService: ScrumboardService,\r\n        private _matDialog: MatDialog\r\n    )\r\n    {\r\n        // Set the private defaults\r\n        this._unsubscribeAll = new Subject();\r\n    }\r\n\r\n    // -----------------------------------------------------------------------------------------------------\r\n    // @ Lifecycle hooks\r\n    // -----------------------------------------------------------------------------------------------------\r\n\r\n    /**\r\n     * On init\r\n     */\r\n    ngOnInit(): void\r\n    {\r\n        this._scrumboardService.onBoardChanged\r\n            .pipe(takeUntil(this._unsubscribeAll))\r\n            .subscribe(board => {\r\n                this.board = board;\r\n            });\r\n    }\r\n\r\n    /**\r\n     * On destroy\r\n     */\r\n    ngOnDestroy(): void\r\n    {\r\n        // Unsubscribe from all subscriptions\r\n        this._unsubscribeAll.next();\r\n        this._unsubscribeAll.complete();\r\n    }\r\n\r\n    // -----------------------------------------------------------------------------------------------------\r\n    // @ Public methods\r\n    // -----------------------------------------------------------------------------------------------------\r\n\r\n    /**\r\n     * On list name changed\r\n     *\r\n     * @param newListName\r\n     */\r\n    onListNameChanged(newListName): void\r\n    {\r\n        this.list.name = newListName;\r\n    }\r\n\r\n    /**\r\n     * On card added\r\n     *\r\n     * @param newCardName\r\n     */\r\n    onCardAdd(newCardName): void\r\n    {\r\n        if ( newCardName === '' )\r\n        {\r\n            return;\r\n        }\r\n\r\n        this._scrumboardService.addCard(this.list.id, new Card({name: newCardName}));\r\n\r\n        setTimeout(() => {\r\n            this.listScroll.scrollToBottom(0, 400);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Remove list\r\n     *\r\n     * @param listId\r\n     */\r\n    removeList(listId): void\r\n    {\r\n        this.confirmDialogRef = this._matDialog.open(FuseConfirmDialogComponent, {\r\n            disableClose: false\r\n        });\r\n\r\n        this.confirmDialogRef.componentInstance.confirmMessage = 'Are you sure you want to delete the list and it\\'s all cards?';\r\n\r\n        this.confirmDialogRef.afterClosed().subscribe(result => {\r\n            if ( result )\r\n            {\r\n                this._scrumboardService.removeList(listId);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Open card dialog\r\n     *\r\n     * @param cardId\r\n     */\r\n    openCardDialog(cardId): void\r\n    {\r\n        this.dialogRef = this._matDialog.open(ScrumboardCardDialogComponent, {\r\n            panelClass: 'scrumboard-card-dialog',\r\n            data      : {\r\n                cardId: cardId,\r\n                listId: this.list.id\r\n            }\r\n        });\r\n        this.dialogRef.afterClosed()\r\n            .subscribe(response => {\r\n\r\n            });\r\n    }\r\n\r\n    /**\r\n     * On drop\r\n     *\r\n     * @param ev\r\n     */\r\n    onDrop(ev): void\r\n    {\r\n        this._scrumboardService.updateBoard();\r\n    }\r\n}\r\n","<div class=\"list mat-elevation-z1\" fxLayout=\"column\">\r\n\r\n    <!-- LIST HEADER -->\r\n    <div class=\"list-header\" fxFlex fxLayout=\"row\" fxLayoutAlign=\"space-between center\">\r\n\r\n        <scrumboard-board-edit-list-name\r\n            fxFlex=\"1 0 auto\"\r\n            [list]=\"list\"\r\n            (listNameChanged)=\"onListNameChanged($event)\">\r\n        </scrumboard-board-edit-list-name>\r\n\r\n        <div fxFlex=\"0 1 auto\">\r\n            <button mat-icon-button class=\"list-header-option-button\" [matMenuTriggerFor]=\"listMenu\">\r\n                <mat-icon>more_vert</mat-icon>\r\n            </button>\r\n            <mat-menu #listMenu=\"matMenu\">\r\n                <button mat-menu-item (click)=\"removeList(list.id)\">Remove List</button>\r\n            </mat-menu>\r\n        </div>\r\n\r\n    </div>\r\n    <!-- / LIST HEADER -->\r\n\r\n    <!-- LIST CONTENT -->\r\n    <div class=\"list-content\" fxLayout=\"column\">\r\n\r\n        <div class=\"list-cards ngx-dnd-container\"\r\n             [model]=\"list.idCards\" ngxDroppable=\"card\" (out)=\"onDrop($event)\"\r\n             fusePerfectScrollbar #listScroll>\r\n            <scrumboard-board-card ngxDraggable\r\n                                   (click)=\"openCardDialog(cardId)\"\r\n                                   class=\"scrumboard-board-card ngx-dnd-item\"\r\n                                   *ngFor=\"let cardId of list.idCards\"\r\n                                   [model]=\"cardId\"\r\n                                   [cardId]=\"cardId\">\r\n            </scrumboard-board-card>\r\n        </div>\r\n    </div>\r\n    <!-- / LIST CONTENT -->\r\n\r\n    <!-- NEW CARD BUTTON-->\r\n    <div class=\"list-footer\">\r\n        <scrumboard-board-add-card (cardAdded)=\"onCardAdd($event)\"></scrumboard-board-add-card>\r\n    </div>\r\n    <!-- / NEW CARD BUTTON-->\r\n\r\n</div>\r\n","import { Component, OnDestroy, OnInit, ViewEncapsulation } from '@angular/core';\r\nimport { Subject } from 'rxjs';\r\nimport { takeUntil } from 'rxjs/operators';\r\n\r\nimport { MatColors } from '@fuse/mat-colors';\r\n\r\nimport { ScrumboardService } from 'app/main/apps/scrumboard/scrumboard.service';\r\n\r\n@Component({\r\n    selector     : 'scrumboard-board-color-selector',\r\n    templateUrl  : './board-color-selector.component.html',\r\n    styleUrls    : ['./board-color-selector.component.scss'],\r\n    encapsulation: ViewEncapsulation.None\r\n})\r\nexport class ScrumboardBoardColorSelectorComponent implements OnInit, OnDestroy\r\n{\r\n    colors: any;\r\n    board: any;\r\n\r\n    // Private\r\n    private _unsubscribeAll: Subject<any>;\r\n\r\n    /**\r\n     * Constructor\r\n     *\r\n     * @param {ScrumboardService} _scrumboardService\r\n     */\r\n    constructor(\r\n        private _scrumboardService: ScrumboardService\r\n    )\r\n    {\r\n        // Set the defaults\r\n        this.colors = MatColors.all;\r\n\r\n        // Set the private defaults\r\n        this._unsubscribeAll = new Subject();\r\n    }\r\n\r\n    // -----------------------------------------------------------------------------------------------------\r\n    // @ Lifecycle hooks\r\n    // -----------------------------------------------------------------------------------------------------\r\n\r\n    /**\r\n     * On init\r\n     */\r\n    ngOnInit(): void\r\n    {\r\n        this._scrumboardService.onBoardChanged\r\n            .pipe(takeUntil(this._unsubscribeAll))\r\n            .subscribe(board => {\r\n                this.board = board;\r\n            });\r\n    }\r\n\r\n    /**\r\n     * On destroy\r\n     */\r\n    ngOnDestroy(): void\r\n    {\r\n        // Unsubscribe from all subscriptions\r\n        this._unsubscribeAll.next();\r\n        this._unsubscribeAll.complete();\r\n    }\r\n\r\n    // -----------------------------------------------------------------------------------------------------\r\n    // @ Public methods\r\n    // -----------------------------------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Set the color\r\n     *\r\n     * @param color\r\n     */\r\n    setColor(color): void\r\n    {\r\n        this.board.settings.color = color;\r\n        this._scrumboardService.updateBoard();\r\n    }\r\n}\r\n","<mat-list class=\"colors\">\r\n    <!-- COLORS -->\r\n    <mat-list-item class=\"color m-8 mat-elevation-z1\"\r\n                   [ngClass]=\"color.key\"\r\n                   *ngFor=\"let color of (colors | keys)\"\r\n                   (click)=\"setColor(color.key)\"\r\n                   matRipple>\r\n        <p fxFlex>{{color.key}}</p>\r\n        <mat-icon class=\"s-16\" *ngIf=\"color.key === board.settings.color\">check</mat-icon>\r\n        <button mat-icon-button *ngIf=\"color.key === board.settings.color\" (click)=\"$event.stopPropagation();setColor('')\">\r\n            <mat-icon class=\"s-16\">delete</mat-icon>\r\n        </button>\r\n    </mat-list-item>\r\n    <!-- / COLORS -->\r\n</mat-list>\r\n","import { Component, OnDestroy, OnInit, ViewEncapsulation } from '@angular/core';\r\n\r\nimport { fuseAnimations } from '@fuse/animations';\r\nimport { ScrumboardService } from 'app/main/apps/scrumboard/scrumboard.service';\r\nimport { Subject } from 'rxjs';\r\nimport { takeUntil } from 'rxjs/operators';\r\n\r\n@Component({\r\n    selector     : 'scrumboard-board-settings',\r\n    templateUrl  : './settings.component.html',\r\n    styleUrls    : ['./settings.component.scss'],\r\n    encapsulation: ViewEncapsulation.None,\r\n    animations   : fuseAnimations\r\n})\r\nexport class ScrumboardBoardSettingsSidenavComponent implements OnInit, OnDestroy\r\n{\r\n    board: any;\r\n    view: string;\r\n\r\n    // Private\r\n    private _unsubscribeAll: Subject<any>;\r\n\r\n    constructor(\r\n        private scrumboardService: ScrumboardService\r\n    )\r\n    {\r\n        // Set the defaults\r\n        this.view = 'main';\r\n\r\n        // Set the private defaults\r\n        this._unsubscribeAll = new Subject();\r\n    }\r\n\r\n    // -----------------------------------------------------------------------------------------------------\r\n    // @ Lifecycle hooks\r\n    // -----------------------------------------------------------------------------------------------------\r\n\r\n    /**\r\n     * On init\r\n     */\r\n    ngOnInit(): void\r\n    {\r\n        this.scrumboardService.onBoardChanged\r\n            .pipe(takeUntil(this._unsubscribeAll))\r\n            .subscribe(board => {\r\n                this.board = board;\r\n            });\r\n    }\r\n\r\n    /**\r\n     * On destroy\r\n     */\r\n    ngOnDestroy(): void\r\n    {\r\n        // Unsubscribe from all subscriptions\r\n        this._unsubscribeAll.next();\r\n        this._unsubscribeAll.complete();\r\n    }\r\n\r\n    // -----------------------------------------------------------------------------------------------------\r\n    // @ Public methods\r\n    // -----------------------------------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Toggle card cover\r\n     */\r\n    toggleCardCover(): void\r\n    {\r\n        this.board.settings.cardCoverImages = !this.board.settings.cardCoverImages;\r\n        this.scrumboardService.updateBoard();\r\n    }\r\n\r\n    /**\r\n     * Toggle subscription\r\n     */\r\n    toggleSubscription(): void\r\n    {\r\n        this.board.settings.subscribed = !this.board.settings.subscribed;\r\n        this.scrumboardService.updateBoard();\r\n    }\r\n}\r\n","<div [ngSwitch]=\"view\" class=\"views\" (click)=\"$event.stopPropagation()\">\r\n\r\n    <div class=\"view\" *ngSwitchCase=\"'main'\" [@slideInLeft]>\r\n\r\n        <!-- SIDENAV HEADER -->\r\n        <div class=\"header px-24\" [ngClass]=\"board.settings.color\" fxLayout=\"column\" fxLayoutAlign=\"center center\">\r\n            <div>Settings</div>\r\n        </div>\r\n        <!-- / SIDENAV HEADER -->\r\n\r\n        <!-- SIDENAV CONTENT -->\r\n        <div class=\"content py-16\" fusePerfectScrollbar>\r\n\r\n            <div class=\"nav material2\">\r\n                <div class=\"nav-item\">\r\n                    <div class=\"nav-link\" matRipple (click)=\"view = 'board-color'\">\r\n                        <mat-icon class=\"nav-link-icon\">format_color_fill</mat-icon>\r\n                        <p class=\"title\">Board Color</p>\r\n                    </div>\r\n                </div>\r\n\r\n                <div class=\"nav-item\">\r\n                    <div class=\"nav-link\" matRipple (click)=\"toggleCardCover()\">\r\n                        <mat-icon class=\"nav-link-icon\">photo</mat-icon>\r\n                        <p fxFlex class=\"title\">Card Cover Images</p>\r\n                        <mat-icon *ngIf=\"board.settings.cardCoverImages\" class=\"s-18\">check</mat-icon>\r\n                    </div>\r\n                </div>\r\n\r\n                <div class=\"nav-item\">\r\n                    <div class=\"nav-link\" matRipple (click)=\"toggleSubscription()\">\r\n                        <mat-icon class=\"nav-link-icon\">remove_red_eye</mat-icon>\r\n                        <p fxFlex class=\"title\">Subscribe</p>\r\n                        <mat-icon *ngIf=\"board.settings.subscribed\" class=\"s-18\">check</mat-icon>\r\n                    </div>\r\n                </div>\r\n\r\n                <div class=\"nav-item\">\r\n                    <div class=\"nav-link\" matRipple>\r\n                        <mat-icon class=\"nav-link-icon\">content_copy</mat-icon>\r\n                        <p class=\"title\">Copy Board</p>\r\n                    </div>\r\n                </div>\r\n\r\n                <div class=\"nav-item\">\r\n                    <div class=\"nav-link\" matRipple>\r\n                        <mat-icon class=\"nav-link-icon\">delete</mat-icon>\r\n                        <p class=\"title\">Delete Board</p>\r\n                    </div>\r\n                </div>\r\n\r\n                <mat-divider></mat-divider>\r\n            </div>\r\n        </div>\r\n        <!-- / SIDENAV CONTENT -->\r\n    </div>\r\n\r\n    <div class=\"view\" *ngSwitchCase=\"'board-color'\" [@slideInRight]>\r\n\r\n        <!-- SIDENAV HEADER -->\r\n        <div class=\"header px-24\" [ngClass]=\"board.settings.color\" fxLayout=\"row\" fxLayoutAlign=\"space-between center\">\r\n            <div>Background Color</div>\r\n            <button mat-icon-button (click)=\"view ='main'\">\r\n                <mat-icon class=\"s-16\">arrow_back</mat-icon>\r\n            </button>\r\n        </div>\r\n        <!-- / SIDENAV HEADER -->\r\n\r\n        <!-- SIDENAV CONTENT -->\r\n        <div class=\"content p-8\" fusePerfectScrollbar>\r\n            <scrumboard-board-color-selector></scrumboard-board-color-selector>\r\n        </div>\r\n        <!-- / SIDENAV CONTENT -->\r\n\r\n    </div>\r\n</div>\r\n","import { FuseUtils } from '@fuse/utils';\r\n\r\nexport class Card\r\n{\r\n    id: string;\r\n    name: string;\r\n    description: string;\r\n    idAttachmentCover: string;\r\n    idMembers: string[];\r\n    idLabels: string[];\r\n    attachments: any[];\r\n    subscribed: boolean;\r\n    checklists: any[];\r\n    checkItems: number;\r\n    checkItemsChecked: number;\r\n    comments: any[];\r\n    activities: any[];\r\n    due: string;\r\n\r\n    /**\r\n     * Constructor\r\n     *\r\n     * @param card\r\n     */\r\n    constructor(card)\r\n    {\r\n        this.id = card.id || FuseUtils.generateGUID();\r\n        this.name = card.name || '';\r\n        this.description = card.description || '';\r\n        this.idAttachmentCover = card.idAttachmentCover || '';\r\n        this.idMembers = card.idMembers || [];\r\n        this.idLabels = card.idLabels || [];\r\n        this.attachments = card.attachments || [];\r\n        this.subscribed = card.subscribed || true;\r\n        this.checklists = card.checklists || [];\r\n        this.checkItems = card.checkItems || 0;\r\n        this.checkItemsChecked = card.checkItemsChecked || 0;\r\n        this.comments = card.comments || [];\r\n        this.activities = card.activities || [];\r\n        this.due = card.due || '';\r\n    }\r\n}\r\n","import { FuseUtils } from '@fuse/utils';\r\n\r\nexport class List\r\n{\r\n    id: string;\r\n    name: string;\r\n    idCards: string[];\r\n\r\n    /**\r\n     * Constructor\r\n     *\r\n     * @param list\r\n     */\r\n    constructor(list)\r\n    {\r\n        this.id = list.id || FuseUtils.generateGUID();\r\n        this.name = list.name || '';\r\n        this.idCards = [];\r\n    }\r\n}\r\n","import { Component, OnDestroy, OnInit, ViewEncapsulation } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { Subject } from 'rxjs';\r\nimport { takeUntil } from 'rxjs/operators';\r\n\r\nimport { fuseAnimations } from '@fuse/animations';\r\n\r\nimport { ScrumboardService } from 'app/main/apps/scrumboard/scrumboard.service';\r\nimport { Board } from 'app/main/apps/scrumboard/board.model';\r\n\r\n@Component({\r\n    selector     : 'scrumboard',\r\n    templateUrl  : './scrumboard.component.html',\r\n    styleUrls    : ['./scrumboard.component.scss'],\r\n    encapsulation: ViewEncapsulation.None,\r\n    animations   : fuseAnimations\r\n})\r\nexport class ScrumboardComponent implements OnInit, OnDestroy\r\n{\r\n    boards: any[];\r\n\r\n    // Private\r\n    private _unsubscribeAll: Subject<any>;\r\n\r\n    /**\r\n     * Constructor\r\n     *\r\n     * @param {Router} _router\r\n     * @param {ScrumboardService} _scrumboardService\r\n     */\r\n    constructor(\r\n        private  _router: Router,\r\n        private _scrumboardService: ScrumboardService\r\n    )\r\n    {\r\n        // Set the private defaults\r\n        this._unsubscribeAll = new Subject();\r\n    }\r\n\r\n    // -----------------------------------------------------------------------------------------------------\r\n    // @ Lifecycle hooks\r\n    // -----------------------------------------------------------------------------------------------------\r\n\r\n    /**\r\n     * On init\r\n     */\r\n    ngOnInit(): void\r\n    {\r\n        this._scrumboardService.onBoardsChanged\r\n            .pipe(takeUntil(this._unsubscribeAll))\r\n            .subscribe(boards => {\r\n                this.boards = boards;\r\n            });\r\n    }\r\n\r\n    /**\r\n     * On destroy\r\n     */\r\n    ngOnDestroy(): void\r\n    {\r\n        // Unsubscribe from all subscriptions\r\n        this._unsubscribeAll.next();\r\n        this._unsubscribeAll.complete();\r\n    }\r\n\r\n    // -----------------------------------------------------------------------------------------------------\r\n    // @ Public methods\r\n    // -----------------------------------------------------------------------------------------------------\r\n\r\n    /**\r\n     * New board\r\n     */\r\n    newBoard(): void\r\n    {\r\n        const newBoard = new Board({});\r\n        this._scrumboardService.createNewBoard(newBoard).then(() => {\r\n            this._router.navigate(['/apps/scrumboard/boards/' + newBoard.id + '/' + newBoard.uri]);\r\n        });\r\n    }\r\n}\r\n","<!-- BOARDS -->\r\n<div id=\"boards\" class=\"fuse-navy\" fxLayout=\"column\" fxLayoutAlign=\"start center\" fxFlex fusePerfectScrollbar>\r\n\r\n    <div class=\"header pt-44 pt-md-88\" fxLayout=\"row\" fxLayoutAlign=\"center center\" fxFlex=\"0 0 auto\"\r\n         [@animate]=\"{value:'*',params:{delay:'100ms'}}\">\r\n        <h1>Scrumboard App</h1>\r\n    </div>\r\n\r\n    <!-- BOARD LIST -->\r\n    <div class=\"board-list\" fxFlex=\"0 0 auto\" fxLayout=\"row wrap\" fxLayoutAlign=\"center center\"\r\n         [@animateStagger]=\"{value:'50'}\">\r\n\r\n        <!-- BOARD -->\r\n        <div class=\"board-list-item\" *ngFor=\"let board of boards\"\r\n             [routerLink]=\"'/apps/scrumboard/boards/'+board.id+'/'+board.uri\"\r\n             fxLayout=\"column\" fxLayoutAlign=\"center center\"\r\n             [@animate]=\"{value:'*',params:{y:'100%'}}\">\r\n            <mat-icon class=\"s-56\">assessment</mat-icon>\r\n            <div class=\"board-name\">{{board.name}}</div>\r\n        </div>\r\n        <!-- / BOARD -->\r\n\r\n        <!-- NEW BOARD BUTTON -->\r\n        <div class=\"board-list-item add-new-board\" fxLayout=\"column\" fxLayoutAlign=\"center center\"\r\n             (click)=\"newBoard()\"\r\n             [@animate]=\"{value:'*',params:{y:'100%'}}\">\r\n            <mat-icon class=\"s-56\">add_circle</mat-icon>\r\n            <div class=\"board-name\">Add new board</div>\r\n        </div>\r\n        <!-- / NEW BOARD BUTTON -->\r\n\r\n    </div>\r\n    <!-- / BOARD LIST -->\r\n</div>\r\n<!-- / BOARDS -->\r\n","import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatCheckboxModule } from '@angular/material/checkbox';\r\nimport { MatChipsModule } from '@angular/material/chips';\r\nimport { MatRippleModule } from '@angular/material/core';\r\nimport { MatDatepickerModule } from '@angular/material/datepicker';\r\nimport { MatDialogModule } from '@angular/material/dialog';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatListModule } from '@angular/material/list';\r\nimport { MatMenuModule } from '@angular/material/menu';\r\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\r\nimport { MatSidenavModule } from '@angular/material/sidenav';\r\nimport { MatToolbarModule } from '@angular/material/toolbar';\r\nimport { MatTooltipModule } from '@angular/material/tooltip';\r\nimport { NgxDnDModule } from '@swimlane/ngx-dnd';\r\n\r\nimport { FuseSharedModule } from '@fuse/shared.module';\r\nimport { FuseConfirmDialogModule, FuseMaterialColorPickerModule } from '@fuse/components';\r\n\r\nimport { BoardResolve, ScrumboardService } from 'app/main/apps/scrumboard/scrumboard.service';\r\nimport { ScrumboardComponent } from 'app/main/apps/scrumboard/scrumboard.component';\r\nimport { ScrumboardBoardComponent } from 'app/main/apps/scrumboard/board/board.component';\r\nimport { ScrumboardBoardListComponent } from 'app/main/apps/scrumboard/board/list/list.component';\r\nimport { ScrumboardBoardCardComponent } from 'app/main/apps/scrumboard/board/list/card/card.component';\r\nimport { ScrumboardBoardEditListNameComponent } from 'app/main/apps/scrumboard/board/list/edit-list-name/edit-list-name.component';\r\nimport { ScrumboardBoardAddCardComponent } from 'app/main/apps/scrumboard/board/list/add-card/add-card.component';\r\nimport { ScrumboardBoardAddListComponent } from 'app/main/apps/scrumboard/board/add-list/add-list.component';\r\nimport { ScrumboardCardDialogComponent } from 'app/main/apps/scrumboard/board/dialogs/card/card.component';\r\nimport { ScrumboardLabelSelectorComponent } from 'app/main/apps/scrumboard/board/dialogs/card/label-selector/label-selector.component';\r\nimport { ScrumboardEditBoardNameComponent } from 'app/main/apps/scrumboard/board/edit-board-name/edit-board-name.component';\r\nimport { ScrumboardBoardSettingsSidenavComponent } from 'app/main/apps/scrumboard/board/sidenavs/settings/settings.component';\r\nimport { ScrumboardBoardColorSelectorComponent } from 'app/main/apps/scrumboard/board/sidenavs/settings/board-color-selector/board-color-selector.component';\r\n\r\nconst routes: Routes = [\r\n    {\r\n        path     : 'boards',\r\n        component: ScrumboardComponent,\r\n        resolve  : {\r\n            scrumboard: ScrumboardService\r\n        }\r\n    },\r\n    {\r\n        path     : 'boards/:boardId/:boardUri',\r\n        component: ScrumboardBoardComponent,\r\n        resolve  : {\r\n            board: BoardResolve\r\n        }\r\n    },\r\n    {\r\n        path      : '**',\r\n        redirectTo: 'boards'\r\n    }\r\n];\r\n\r\n@NgModule({\r\n    declarations   : [\r\n        ScrumboardComponent,\r\n        ScrumboardBoardComponent,\r\n        ScrumboardBoardListComponent,\r\n        ScrumboardBoardCardComponent,\r\n        ScrumboardBoardEditListNameComponent,\r\n        ScrumboardBoardAddCardComponent,\r\n        ScrumboardBoardAddListComponent,\r\n        ScrumboardCardDialogComponent,\r\n        ScrumboardLabelSelectorComponent,\r\n        ScrumboardEditBoardNameComponent,\r\n        ScrumboardBoardSettingsSidenavComponent,\r\n        ScrumboardBoardColorSelectorComponent\r\n    ],\r\n    imports        : [\r\n        RouterModule.forChild(routes),\r\n\r\n        MatButtonModule,\r\n        MatCheckboxModule,\r\n        MatChipsModule,\r\n        MatDatepickerModule,\r\n        MatDialogModule,\r\n        MatFormFieldModule,\r\n        MatIconModule,\r\n        MatInputModule,\r\n        MatListModule,\r\n        MatMenuModule,\r\n        MatProgressBarModule,\r\n        MatRippleModule,\r\n        MatSidenavModule,\r\n        MatToolbarModule,\r\n        MatTooltipModule,\r\n\r\n        NgxDnDModule,\r\n\r\n        FuseSharedModule,\r\n        FuseConfirmDialogModule,\r\n        FuseMaterialColorPickerModule\r\n    ],\r\n    providers      : [\r\n        ScrumboardService,\r\n        BoardResolve\r\n    ],\r\n    entryComponents: [ScrumboardCardDialogComponent]\r\n})\r\nexport class ScrumboardModule\r\n{\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { ActivatedRouteSnapshot, Resolve, RouterStateSnapshot } from '@angular/router';\r\nimport { Observable, BehaviorSubject } from 'rxjs';\r\n\r\n@Injectable()\r\nexport class ScrumboardService implements Resolve<any>\r\n{\r\n    boards: any[];\r\n    routeParams: any;\r\n    board: any;\r\n\r\n    onBoardsChanged: BehaviorSubject<any>;\r\n    onBoardChanged: BehaviorSubject<any>;\r\n\r\n    /**\r\n     * Constructor\r\n     *\r\n     * @param {HttpClient} _httpClient\r\n     */\r\n    constructor(\r\n        private _httpClient: HttpClient\r\n    )\r\n    {\r\n        // Set the defaults\r\n        this.onBoardsChanged = new BehaviorSubject([]);\r\n        this.onBoardChanged = new BehaviorSubject([]);\r\n    }\r\n\r\n    /**\r\n     * Resolver\r\n     *\r\n     * @param {ActivatedRouteSnapshot} route\r\n     * @param {RouterStateSnapshot} state\r\n     * @returns {Observable<any> | Promise<any> | any}\r\n     */\r\n    resolve(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<any> | Promise<any> | any\r\n    {\r\n        this.routeParams = route.params;\r\n\r\n        return new Promise((resolve, reject) => {\r\n            Promise.all([\r\n                this.getBoards()\r\n            ]).then(\r\n                () => {\r\n                    resolve();\r\n                },\r\n                reject\r\n            );\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Get boards\r\n     *\r\n     * @returns {Promise<any>}\r\n     */\r\n    getBoards(): Promise<any>\r\n    {\r\n        return new Promise((resolve, reject) => {\r\n            this._httpClient.get('api/scrumboard-boards')\r\n                .subscribe((response: any) => {\r\n                    this.boards = response;\r\n                    this.onBoardsChanged.next(this.boards);\r\n                    resolve(this.boards);\r\n                }, reject);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Get board\r\n     *\r\n     * @param boardId\r\n     * @returns {Promise<any>}\r\n     */\r\n    getBoard(boardId): Promise<any>\r\n    {\r\n        return new Promise((resolve, reject) => {\r\n            this._httpClient.get('api/scrumboard-boards/' + boardId)\r\n                .subscribe((response: any) => {\r\n                    this.board = response;\r\n                    this.onBoardChanged.next(this.board);\r\n                    resolve(this.board);\r\n                }, reject);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Add card\r\n     *\r\n     * @param listId\r\n     * @param newCard\r\n     * @returns {Promise<any>}\r\n     */\r\n    addCard(listId, newCard): Promise<any>\r\n    {\r\n        this.board.lists.map((list) => {\r\n            if ( list.id === listId )\r\n            {\r\n                return list.idCards.push(newCard.id);\r\n            }\r\n        });\r\n\r\n        this.board.cards.push(newCard);\r\n\r\n        return this.updateBoard();\r\n    }\r\n\r\n    /**\r\n     * Add list\r\n     *\r\n     * @param newList\r\n     * @returns {Promise<any>}\r\n     */\r\n    addList(newList): Promise<any>\r\n    {\r\n        this.board.lists.push(newList);\r\n\r\n        return this.updateBoard();\r\n    }\r\n\r\n    /**\r\n     * Remove list\r\n     *\r\n     * @param listId\r\n     * @returns {Promise<any>}\r\n     */\r\n    removeList(listId): Promise<any>\r\n    {\r\n        const list = this.board.lists.find((_list) => {\r\n            return _list.id === listId;\r\n        });\r\n\r\n        for ( const cardId of list.idCards )\r\n        {\r\n            this.removeCard(cardId);\r\n        }\r\n\r\n        const index = this.board.lists.indexOf(list);\r\n\r\n        this.board.lists.splice(index, 1);\r\n\r\n        return this.updateBoard();\r\n    }\r\n\r\n    /**\r\n     * Remove card\r\n     *\r\n     * @param cardId\r\n     * @param listId\r\n     */\r\n    removeCard(cardId, listId?): void\r\n    {\r\n        const card = this.board.cards.find((_card) => {\r\n            return _card.id === cardId;\r\n        });\r\n\r\n        if ( listId )\r\n        {\r\n            const list = this.board.lists.find((_list) => {\r\n                return listId === _list.id;\r\n            });\r\n            list.idCards.splice(list.idCards.indexOf(cardId), 1);\r\n        }\r\n\r\n        this.board.cards.splice(this.board.cards.indexOf(card), 1);\r\n\r\n        this.updateBoard();\r\n    }\r\n\r\n    /**\r\n     * Update board\r\n     *\r\n     * @returns {Promise<any>}\r\n     */\r\n    updateBoard(): Promise<any>\r\n    {\r\n        return new Promise((resolve, reject) => {\r\n            this._httpClient.post('api/scrumboard-boards/' + this.board.id, this.board)\r\n                .subscribe(response => {\r\n                    this.onBoardChanged.next(this.board);\r\n                    resolve(this.board);\r\n                }, reject);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Update card\r\n     *\r\n     * @param newCard\r\n     */\r\n    updateCard(newCard): void\r\n    {\r\n        this.board.cards.map((_card) => {\r\n            if ( _card.id === newCard.id )\r\n            {\r\n                return newCard;\r\n            }\r\n        });\r\n\r\n        this.updateBoard();\r\n    }\r\n\r\n    /**\r\n     * Create new board\r\n     *\r\n     * @param board\r\n     * @returns {Promise<any>}\r\n     */\r\n    createNewBoard(board): Promise<any>\r\n    {\r\n        return new Promise((resolve, reject) => {\r\n            this._httpClient.post('api/scrumboard-boards/' + board.id, board)\r\n                .subscribe(response => {\r\n                    resolve(board);\r\n                }, reject);\r\n        });\r\n    }\r\n}\r\n\r\n@Injectable()\r\nexport class BoardResolve implements Resolve<any>\r\n{\r\n    /**\r\n     * Constructor\r\n     *\r\n     * @param {ScrumboardService} _scrumboardService\r\n     */\r\n    constructor(\r\n        private _scrumboardService: ScrumboardService\r\n    )\r\n    {\r\n    }\r\n\r\n    /**\r\n     * Resolver\r\n     *\r\n     * @param {ActivatedRouteSnapshot} route\r\n     * @returns {Promise<any>}\r\n     */\r\n    resolve(route: ActivatedRouteSnapshot): Promise<any>\r\n    {\r\n        return this._scrumboardService.getBoard(route.paramMap.get('boardId'));\r\n    }\r\n}\r\n"]}